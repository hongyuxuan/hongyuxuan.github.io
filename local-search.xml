<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>国庆甘南小环线四天三晚包车游</title>
    <link href="/2023/10/05/travel/gannan/gnanan/"/>
    <url>/2023/10/05/travel/gannan/gnanan/</url>
    
    <content type="html"><![CDATA[<p>这个中秋国庆8天假，提前一个月计划了甘南小环线，飞猪购买了四天三晚的套餐，包车（带司机）+住宿，</p><h1 id="行程如下"><a href="#行程如下" class="headerlink" title="行程如下"></a>行程如下</h1><p>D1 兰州市区-拉卜楞寺-甘加秘境-八角城-白石崖溶洞-夏河县，当晚入住夏河县城<br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Ftravel%2Fganna%2F1.jpg"><br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Ftravel%2Fganna%2F2.jpg"><br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Ftravel%2Fganna%2F3.jpg"><br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Ftravel%2Fganna%2F4.jpg"></p><p>D2 桑科草原-郭莽湿地-郎木寺-纳摩大峡谷-黄河九曲第一湾-唐克镇，当晚入住若尔盖县城<br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Ftravel%2Fganna%2F5.jpg"><br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Ftravel%2Fganna%2F6.jpg"><br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Ftravel%2Fganna%2F7.jpg"><br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Ftravel%2Fganna%2F8.jpg"><br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Ftravel%2Fganna%2F9.jpg"><br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Ftravel%2Fganna%2Fgannan_banner.jpg"><br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Ftravel%2Fganna%2F10.jpg"><br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Ftravel%2Fganna%2F11.jpg"></p><p>D3 若尔盖草原-花湖-扎尕那，当晚入住扎尕那景区<br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Ftravel%2Fganna%2F12.jpg"><br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Ftravel%2Fganna%2F13.jpg"><br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Ftravel%2Fganna%2F14.jpg"></p><p>D4 扎尕那-米拉日巴佛阁-兰州<br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Ftravel%2Fganna%2F15.jpg"><br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Ftravel%2Fganna%2F16.jpg"></p><h1 id="游玩指南"><a href="#游玩指南" class="headerlink" title="游玩指南"></a>游玩指南</h1><ol><li>小环线可以玩四天或者五天，有体力的可以自己驾车自由行，像我们为了省事的就购买一个包车套餐，旅行社出车出司机，并且负责给订酒店。</li><li>一般都是从兰州出发，最后回到兰州。兰州墙裂推荐兰州老街的凡里而美酒店。</li><li>按行程如果要看黄河日落一定要在日落时间提前至少半小时到景区，因为到观景台去晚了扶梯就关了，自己走上去要4公里。</li><li>行程中走的各种国道随时会有牦牛番羊横穿公路，从左边的草原转场到右边的草原，注意避让。</li></ol>]]></content>
    
    
    <categories>
      
      <category>旅游</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旅游</tag>
      
      <tag>国内游</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go-zero+opentelemetry+jaeger云原生链路跟踪实践</title>
    <link href="/2023/05/05/cncf/monitor/go-zero-jaeger/"/>
    <url>/2023/05/05/cncf/monitor/go-zero-jaeger/</url>
    
    <content type="html"><![CDATA[<p>本文示例程序用到的组件和框架如下：</p><ul><li>jaeger：云原生可观测链路跟踪工具。关于jaeger部署详见链路跟踪工具Jaeger+OpenTelemetry Collector部署详解</li><li>go-zero：一个go语言版的集成了各种工程实践的api和rpc微服务框架，本文将使用go-zero的api框架</li><li>imroc&#x2F;req：一个开源的go语言轻量级HTTP客户端库</li><li>opentelemetry：提供了一组API和SDK来标准化遥测数据的采集和传输，相对于skywalking等字节码实现的非侵入式链路跟踪工具来说，opentelemetry是一组可观测领域的标准和规范，基于这个标准提供的各种语言的SDK，通过在代码中打埋点的方式（侵入式），可实现市面上绝大多数语言的链路跟踪功能（比如skywalking、听云等对ktor都不支持，但opentelemetry支持）</li></ul><h1 id="go-zero示例程序"><a href="#go-zero示例程序" class="headerlink" title="go-zero示例程序"></a>go-zero示例程序</h1><p>以一个封装了蓝鲸CMDB接口的示例工程为例（api工程），工程名叫bkcmdb，目录结构如下：<br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fmonitor%2Fgozerojaeger%2F1.png"></p><p>蓝鲸CMDB提供了HTTP接口，示例工程通过imroc&#x2F;req库封装了蓝鲸CMDB接口，通过在调用蓝鲸接口的前后打入埋点，实现一次调用的链路跟踪功能。</p><p>如下的一次调用，将会在一个链路（即trace）上产生两个节点（即span）：<br>postman –&gt; bkcmdb(go-zero) –&gt; 蓝鲸接口</p><p>该链路第一个节点是bkcmdb，第二个节点是蓝鲸接口。默认go-zero是没有开启链路跟踪功能的，下文将说明如何启用。</p><h1 id="go-zero启动链路跟踪功能"><a href="#go-zero启动链路跟踪功能" class="headerlink" title="go-zero启动链路跟踪功能"></a>go-zero启动链路跟踪功能</h1><p>在正式介绍opentrace基本概念之前，先通过简单的配置启动go-zero的链路跟踪功能看一看效果。go-zero自带了基于opentelemetry的链路追踪功能，默认未开启，在工程的配置文件etc&#x2F;bkcmdb.yaml中增加如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Telemetry:</span><br>  <span class="hljs-attr">Name:</span> <span class="hljs-string">fiops-bkcmdb</span><br>  <span class="hljs-attr">Endpoint:</span> <span class="hljs-string">http://jaeger-collector.xxx.io/api/traces</span><br>  <span class="hljs-attr">Sampler:</span> <span class="hljs-number">1.0</span><br>  <span class="hljs-attr">Batcher:</span> <span class="hljs-string">jaeger</span><br></code></pre></td></tr></table></figure><p>只需在配置文件中增加<code>Telemetry</code>配置块即可，无需修改任何代码。其中<code>Name</code>是该链路上的ServiceName，将会在jaeger（或zipkin）上显示为Service。Endpoint是链路跟踪工具（jaeger或zipkin）的collector地址。<code>Batcher</code>这里指定链路跟踪工具为jaeger。</p><div class="note note-primary">            <p>注意：默认配置了Telemetry后，只能在链路中采集到客户端（比如postman）访问bkcmdb服务端这前半条链路，bkcmdb通过imroc&#x2F;req访问蓝鲸CMDB的后半条链路现在还采集不到。</p>          </div><p>现在用postman访问bkcmdb</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl --location &#x27;http://&lt;bkcmdb-url&gt;/v1/project/search&#x27; \<br>--header &#x27;Content-Type: application/json&#x27; \<br>--data &#x27;&#123;<br>    &quot;condition&quot;: &#123;<br>        &quot;project&quot;: [ ]<br>    &#125;,<br>    &quot;page&quot;: &#123;<br>        &quot;limit&quot;: 100,<br>        &quot;sort&quot;: &quot;-bk_inst_id&quot;,<br>        &quot;start&quot;: 0<br>    &#125;<br>&#125;&#x27;<br></code></pre></td></tr></table></figure><p>打开jaeger前端页面，Service搜索fiops-bkcmdb，可以看到出现了一条链路，且链路中只有一个span，这个span就是客户端访问bkcmdb服务端的链路。<br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fmonitor%2Fgozerojaeger%2F2.png"></p><p>点击这条链路进入详情页，展开trace，地址栏url红框内是traceId，右下角红框是spanId<br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fmonitor%2Fgozerojaeger%2F3.png"></p><p>到此示例工程就算成功开启了链路跟踪功能，但这样还不能满足我们的需求，我们还需要bkcmdb访问蓝鲸CMDB的链路。在继续修改代码之前，我们先来了解一下opentracing、opentelemetry的基本概念。</p><h1 id="OpenTracing"><a href="#OpenTracing" class="headerlink" title="OpenTracing"></a>OpenTracing</h1><blockquote><p><a href="https://opentracing.io/">https://opentracing.io/</a></p></blockquote><p>分布式追踪为描述和分析跨进程事务、甚至是跨网络调用提供了一种解决方案。早在 2005 年，Google 就在内部部署了一套分布式追踪系统 Dapper，并发表了一篇论文《Dapper, a Large-Scale Distributed Systems Tracing Infrastructure》，阐述了该分布式追踪系统的设计和实现，可以视为分布式追踪领域的鼻祖。后来各家厂商公司受此启发，纷纷开源了自家的链路跟踪产品，如zipkin、Uber的jaeger等。但各家的分布式追踪方案互不兼容，于是就诞生了<strong>OpenTracing</strong>。OpenTracing 是一个 Library，定义了一套通用的数据上报接口，要求各个分布式追踪系统都来实现这套接口。</p><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><p>OpenTracing规范中定义了数据模型，可参考原始文档The OpenTracing Semantic Specification</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">Causal relationships between Spans in a single Trace<br> <br>         [Span A]  ←←←(the root span)<br>             |<br>      +------+------+<br>      |             |<br>  [Span B]      [Span C] ←←←(Span C is a `ChildOf` Span A)<br>      |             |<br>  [Span D]      +---+-------+<br>               |           |<br>           [Span E]    [Span F] &gt;&gt;&gt; [Span G] &gt;&gt;&gt; [Span H]<br>                                       ↑<br>                                       ↑<br>                                       ↑<br>                         (Span G `FollowsFrom` Span F)<br></code></pre></td></tr></table></figure><p>在OpenTracing模型中有三个基本概念：</p><ul><li>Trace：调用链，一次HTTP调用或者一次RPC调用（从起始到最后终止），一个调用链会分配一个全局唯一的TraceID</li><li>Span：每个调用链由多个Span组成。Span的含义是范围，可以理解为一个处理阶段（例如一次HTTP调用、一次数据库访问）。Span是一个分布式追踪的最小单位。Span和Span的关系称为Reference。下面是一个Span的结构。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Span <span class="hljs-keyword">struct</span> &#123;<br>  ctx           spanContext<br>  serviceName   <span class="hljs-type">string</span><br>  operationName <span class="hljs-type">string</span><br>  startTime     time.Time<br>  flag          <span class="hljs-type">string</span><br>  children      <span class="hljs-type">int</span><br>&#125;<br></code></pre></td></tr></table></figure>Span会封装一组零个或多个key:value的Tags，用于标识一些想在链路中展示的数据</li><li>SpanContext：保存链路的上下文信息[TraceID,SpanID,或者是其它想要传递的内容]实现了tracer接口<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> spanContext <span class="hljs-keyword">struct</span> &#123;<br>  traceId <span class="hljs-type">string</span><br>  spanId  <span class="hljs-type">string</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="Span之间的关系"><a href="#Span之间的关系" class="headerlink" title="Span之间的关系"></a>Span之间的关系</h2><ul><li><p>ChildOf：两个Span可以组成父子关系</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[-Parent Span---------]<br>         [-Child Span----]<br><br>    [-Parent Span--------------]<br>         [-Child Span A----]<br>          [-Child Span B----]<br>        [-Child Span C----]<br>         [-Child Span D---------------]<br>         [-Child Span E----]<br></code></pre></td></tr></table></figure></li><li><p>FollowsFrom：某些父Span在任何方面都不依赖子Span的结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[-Parent Span-]  [-Child Span-]<br><br><br>    [-Parent Span--]<br>     [-Child Span-]<br><br><br>    [-Parent Span-]<br>                [-Child Span-]<br></code></pre></td></tr></table></figure></li></ul><h2 id="OpenCensus"><a href="#OpenCensus" class="headerlink" title="OpenCensus"></a>OpenCensus</h2><blockquote><p><a href="https://opencensus.io/">https://opencensus.io/</a></p></blockquote><p>OpenCensus是Google开源的，作为最早提出Tracing概念的公司，OpenCensus也是Google Dapper的社区版本。相对于OpenTracing只支持tracing，OpenCensus不仅支持tracing还支持metrics。OpenTracing只制定规范，OpenCensus不仅制定规范，还包含了Agent和Collector。</p><h1 id="OpenTelemetry"><a href="#OpenTelemetry" class="headerlink" title="OpenTelemetry"></a>OpenTelemetry</h1><blockquote><p><a href="https://opentelemetry.io/">https://opentelemetry.io/</a></p></blockquote><p>为了更好的将Tracing、Metrics、Logging融合在一起，OpenTelemetry 诞生了。作为 CNCF 的孵化项目，OpenTelemetry 由 OpenTracing 和 OpenCensus 项目合并而成，是一组规范、API 接口、SDK、工具和集成。为众多开发人员带来 Metrics、Tracing、Loging 的统一标准，三者都有相同的元数据结构，可以轻松实现互相关联。</p><p>OpenTelemetry 与厂商、平台无关，不提供与可观测性相关的后端服务。可根据用户需求将可观测类数据导出到存储、查询、可视化等不同后端，如 Prometheus、Jaeger 、云厂商服务中。</p><p>有了基本概念以后，下来看看如何使用imroc&#x2F;req在发送HTTP的时候加入tracing。</p><h2 id="自定义imroc-req中间件实现发送HTTP的trace跟踪"><a href="#自定义imroc-req中间件实现发送HTTP的trace跟踪" class="headerlink" title="自定义imroc&#x2F;req中间件实现发送HTTP的trace跟踪"></a>自定义imroc&#x2F;req中间件实现发送HTTP的trace跟踪</h2><p>这里我们建一个HttpClient封装一下req。在svc目录下新建httpclient.go，并在里面新建一个结构体：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> HttpClient <span class="hljs-keyword">struct</span> &#123;<br>    *req.Client<br>&#125;<br></code></pre></td></tr></table></figure><p>定义NewHttpClient函数用于返回一个实例化的HttpClient，在OnBeforeRequest里定义请求发送前的动作，在OnAfterResponse里定义请求返回后的动作。到此为止都是常规操作，还没涉及到任何tracing动作。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 需要传入go-zero的Config对象</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewHttpClient</span><span class="hljs-params">(conf config.Config)</span></span> *HttpClient &#123;<br>  headers := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<br>    <span class="hljs-string">&quot;BK_USER&quot;</span>:                   <span class="hljs-string">&quot;admin&quot;</span>,<br>    <span class="hljs-string">&quot;HTTP_BLUEKING_SUPPLIER_ID&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>  &#125;<br>  c := req.C().<br>    SetCommonHeaders(headers).SetBaseURL(fmt.Sprintf(<span class="hljs-string">&quot;http://%s&quot;</span>, conf.BkcmdbUrl)).<br>    OnBeforeRequest(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(client *req.Client, req *req.Request)</span></span> <span class="hljs-type">error</span> &#123;<br>      <span class="hljs-keyword">if</span> req.RetryAttempt &gt; <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>      &#125;<br>      req.EnableDump()<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>    &#125;).<br>    OnAfterResponse(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(client *req.Client, res *req.Response)</span></span> (err <span class="hljs-type">error</span>) &#123;<br>      responseCode := strconv.Itoa(res.StatusCode)<br>      <span class="hljs-keyword">if</span> !strings.HasPrefix(responseCode, <span class="hljs-string">&quot;2&quot;</span>) &amp;&amp; !strings.HasPrefix(responseCode, <span class="hljs-string">&quot;3&quot;</span>) &#123;<br>        <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>          <span class="hljs-keyword">if</span> e := <span class="hljs-built_in">recover</span>(); e != <span class="hljs-literal">nil</span> &#123;<br>            err = errorx.NewError(res.StatusCode, res.String(), <span class="hljs-literal">nil</span>)<br>          &#125;<br>        &#125;()<br>        ress := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;)<br>        res.UnmarshalJson(&amp;ress)<br>        err = errorx.NewError(res.StatusCode, ress[<span class="hljs-string">&quot;message&quot;</span>].(<span class="hljs-type">string</span>), ress[<span class="hljs-string">&quot;data&quot;</span>])<br>      &#125;<br>      <span class="hljs-keyword">if</span> res.Err != <span class="hljs-literal">nil</span> &#123;<br>        err = errorx.NewError(http.StatusInternalServerError, res.Err.Error(), <span class="hljs-literal">nil</span>)<br>      &#125;<br>      <span class="hljs-keyword">return</span><br>    &#125;)<br>  logx.Infof(<span class="hljs-string">&quot;init req client %s success&quot;</span>, c.BaseURL)<br>  <span class="hljs-keyword">return</span> &amp;HttpClient&#123;<br>    Client: c,<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来给结构体定义一个<code>SetTracer</code>方法用于设置tracing，这里用到了req的<code>WrapRoundTripFunc</code>用来给req自定义一个中间件，该中间件类似一个拦截器，可在请求发送前和响应后做一些集中处理的工作。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *HttpClient)</span></span> SetTracer(tracer trace.Tracer) &#123;<br>  c.WrapRoundTripFunc(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(rt req.RoundTripper)</span></span> req.RoundTripFunc &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(req *req.Request)</span></span> (resp *req.Response, err <span class="hljs-type">error</span>) &#123;<br>      <span class="hljs-comment">// Context().Value(key)可以从context中提取预先设定的值</span><br>      spanName, ok := req.Context().Value(<span class="hljs-string">&quot;SpanName&quot;</span>).(<span class="hljs-type">string</span>)<br>      <span class="hljs-keyword">if</span> !ok &#123;<br>        spanName = req.URL.Path <span class="hljs-comment">// 如果没有预先设定SpanName，就以请求url作为SpanName</span><br>      &#125;<br>      <span class="hljs-comment">// 最关键的一步，启动span，并传入上下文context(来自于*req.Request)，会返回一个加入了span的context和一个span对象</span><br>      _, span := tracer.Start(req.Context(), spanName) <br>      <span class="hljs-keyword">defer</span> span.End() <span class="hljs-comment">// 无论成功与否这里需要用End将span发射出去(发射到jaeger或zipkin)</span><br>      <span class="hljs-comment">// 下面给span添加一些tags</span><br>      span.SetAttributes(<br>        attribute.String(<span class="hljs-string">&quot;http.url&quot;</span>, req.URL.String()),<br>        attribute.String(<span class="hljs-string">&quot;http.method&quot;</span>, req.Method),<br>        attribute.String(<span class="hljs-string">&quot;http.request.header&quot;</span>, req.HeaderToString()),<br>      )<br>      <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(req.Body) &gt; <span class="hljs-number">0</span> &#123;<br>        span.SetAttributes(<br>          attribute.String(<span class="hljs-string">&quot;http.request.body&quot;</span>, <span class="hljs-type">string</span>(req.Body)),<br>        )<br>      &#125;<br>      <span class="hljs-comment">// 下面这句话将流程交还给req去执行发送请求动作</span><br>      resp, err = rt.RoundTrip(req)<br>      <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123; <span class="hljs-comment">// 失败了记录在span里</span><br>        span.RecordError(err)<br>        span.SetStatus(codes.Error, err.Error())<br>        <span class="hljs-keyword">return</span><br>      &#125;<br>      <span class="hljs-comment">// 添加一些响应tags</span><br>      span.SetAttributes(<br>        attribute.Int(<span class="hljs-string">&quot;http.status_code&quot;</span>, resp.StatusCode),<br>        attribute.String(<span class="hljs-string">&quot;http.response.header&quot;</span>, resp.HeaderToString()),<br>        attribute.String(<span class="hljs-string">&quot;http.response.body&quot;</span>, resp.String()),<br>      )<br>      <span class="hljs-keyword">return</span><br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>封装好了HttpClient，接下来把它放入servicecontext方便被调用，并在servicecontext中实例化它</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> ServiceContext <span class="hljs-keyword">struct</span> &#123;<br>  Config        config.Config<br>  Client_bkcmdb *HttpClient<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewServiceContext</span><span class="hljs-params">(c config.Config)</span></span> *ServiceContext &#123;<br>  client := NewHttpClient(c) <span class="hljs-comment">// 实例化HttpClient</span><br>  client.SetTracer(otel.Tracer(<span class="hljs-string">&quot;imroc/req&quot;</span>)) <span class="hljs-comment">// 设置开启Trace，并用otel.Tracer(&quot;imroc/req&quot;)设置otel.library</span><br>  <span class="hljs-keyword">return</span> &amp;ServiceContext&#123;<br>    Config:        c,<br>    Client_bkcmdb: client,<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来封装一个蓝鲸CMDB接口的结构体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> BkcmdbUtil <span class="hljs-keyword">struct</span> &#123;<br>  logx.Logger<br>  ctx    context.Context<br>  svcCtx *ServiceContext<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetBkcmdbUtil</span><span class="hljs-params">(ctx context.Context, svcCtx *ServiceContext)</span></span> *BkcmdbUtil &#123;<br>  <span class="hljs-keyword">return</span> &amp;BkcmdbUtil&#123;<br>    Logger: logx.WithContext(ctx),<br>    ctx:    ctx,<br>    svcCtx: svcCtx,<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后以一个蓝鲸添加模型实例的接口为例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(b *BkcmdbUtil)</span></span> AddInstance(tablename <span class="hljs-type">string</span>, v <span class="hljs-keyword">interface</span>&#123;&#125;) (resp *types.BkcmdbRes, err <span class="hljs-type">error</span>) &#123;<br>  <span class="hljs-comment">// 下面这句话的核心是.Do(context.WithValue(b.ctx, &quot;SpanName&quot;, &quot;AddInstance&quot;))</span><br>  <span class="hljs-comment">// 通过调用context.WithValue给ctx设置SpanName，然后就可以在前文定义的中间件中用req.Context().Value(&quot;SpanName&quot;).(string)把SpanName取出来了</span><br>  err = b.svcCtx.Client_bkcmdb.Post(fmt.Sprintf(<span class="hljs-string">&quot;/api/v3/create/instance/object/%s&quot;</span>, tablename)).SetBody(v).SetResult(&amp;resp).Do(context.WithValue(b.ctx, <span class="hljs-string">&quot;SpanName&quot;</span>, <span class="hljs-string">&quot;AddInstance&quot;</span>)).Err<br>  <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    b.Logger.Error(err)<br>    <span class="hljs-keyword">return</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> resp.Code != <span class="hljs-number">0</span> &#123;<br>    b.Logger.Errorf(<span class="hljs-string">&quot;add %s instance failed: %v&quot;</span>, tablename, resp.Message)<br>    <span class="hljs-comment">// errorx是自定义的错误处理类</span><br>    err = errorx.NewDefaultError(fmt.Sprintf(<span class="hljs-string">&quot;add %s instance failed: %v&quot;</span>, tablename, resp.Message))<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-comment">// 返回值types.BkcmdbRes是自定义的返回结构体</span><br>&#125;<br></code></pre></td></tr></table></figure><p>示例代码写到这就可以了，接下来再用postman发起一次调用，打开jaeger页面，会发现一个链路里现在出现了两个span，其中一个是postman访问go-zero接口的span，第二个就是go-zero通过req访问蓝鲸CMDB的span。<br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fmonitor%2Fgozerojaeger%2F4.png"><br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fmonitor%2Fgozerojaeger%2F5.png"></p><h2 id="其它通用操作的trace跟踪"><a href="#其它通用操作的trace跟踪" class="headerlink" title="其它通用操作的trace跟踪"></a>其它通用操作的trace跟踪</h2><p>有了如上示例，我们其实可以在任意操作前后打埋点（开启一个span），比如访问数据库、MongoDB、Redis、Elasticsearch、调用其它平台SDK（比如kubernetes client-go）等等，下来以Elasticsearch为例说明。</p><p>封装一个<code>EsUtil</code>用来操作elasticsearch</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> EsUtil <span class="hljs-keyword">struct</span> &#123;<br>  logx.Logger<br>  ctx    context.Context<br>  svcCtx *ServiceContext<br>  tracer trace.Tracer<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetEsUtil</span><span class="hljs-params">(ctx context.Context, svcCtx *ServiceContext)</span></span> *EsUtil &#123;<br>  <span class="hljs-keyword">return</span> &amp;EsUtil&#123;<br>    Logger: logx.WithContext(ctx),<br>    ctx:    ctx,<br>    svcCtx: svcCtx,<br>    tracer: otel.Tracer(<span class="hljs-string">&quot;go-elasticsearch&quot;</span>),<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在发起一个ES操作（例如插入一个文档）的前后打入埋点<code>startTracer</code>、<code>endTracer</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(es *EsUtil)</span></span> EsIndex(index <span class="hljs-type">string</span>, body <span class="hljs-keyword">interface</span>&#123;&#125;, id <span class="hljs-type">string</span>, ctx context.Context) (*types.EsAddResponse, <span class="hljs-type">error</span>) &#123;<br>  b, _ := json.Marshal(body)<br>  es.Logger.Debugf(<span class="hljs-string">&quot;es index request=%v&quot;</span>, <span class="hljs-type">string</span>(b))<br>  span := es.newSpan(ctx, index) <span class="hljs-comment">// 创建一个span</span><br>  <span class="hljs-keyword">defer</span> span.End() <span class="hljs-comment">// 用End把span发射出去</span><br>  es.startTracer(index, id, <span class="hljs-string">&quot;index&quot;</span>, b, span, ctx) <span class="hljs-comment">// 请求前开启span</span><br>  res, err := es.svcCtx.Esclient.Index(<br>    index,<br>    bytes.NewReader(b),<br>    es.svcCtx.Esclient.Index.WithDocumentID(id),<br>    es.svcCtx.Esclient.Index.WithContext(ctx),<br>  )<br>  <span class="hljs-keyword">defer</span> res.Body.Close()<br>  <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>  &#125;<br>  <span class="hljs-keyword">if</span> res.IsError() &#123;<br>    err = errorx.NewDefaultError(fmt.Sprintf(<span class="hljs-string">&quot;[%s] error indexing document ID=%v&quot;</span>, res.Status(), id))<br>    es.endTracer(err, res.StatusCode, <span class="hljs-literal">nil</span>, span) <span class="hljs-comment">// 出错后结束span并写入错误信息</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">var</span> r types.EsAddResponse <span class="hljs-comment">// 自定义了es返回结构体</span><br>    json.NewDecoder(res.Body).Decode(&amp;r)<br>    b, _ = json.Marshal(r)<br>    es.Logger.Debugf(<span class="hljs-string">&quot;es index response=%v&quot;</span>, <span class="hljs-type">string</span>(b))<br>    es.endTracer(<span class="hljs-literal">nil</span>, res.StatusCode, b, span) <span class="hljs-comment">// 正常返回结束span并写入返回值</span><br>    <span class="hljs-keyword">return</span> &amp;r, <span class="hljs-literal">nil</span><br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(es *EsUtil)</span></span> newSpan(ctx context.Context, name <span class="hljs-type">string</span>) (span trace.Span) &#123;<br>  spanName, ok := ctx.Value(<span class="hljs-string">&quot;SpanName&quot;</span>).(<span class="hljs-type">string</span>)<br>  <span class="hljs-keyword">if</span> !ok &#123;<br>      spanName = name<br>  &#125;<br>  _, span = es.tracer.Start(ctx, spanName)<br>  <span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(es *EsUtil)</span></span> startTracer(index, id, action <span class="hljs-type">string</span>, body []<span class="hljs-type">byte</span>, span trace.Span, ctx context.Context) &#123;<br>  span.SetAttributes(<br>    attribute.String(<span class="hljs-string">&quot;elastic._index&quot;</span>, index),<br>    attribute.String(<span class="hljs-string">&quot;elastic._id&quot;</span>, id),<br>    attribute.String(<span class="hljs-string">&quot;elastic.action&quot;</span>, action),<br>    attribute.String(<span class="hljs-string">&quot;elastic.client.version&quot;</span>, elasticsearch.Version),<br>  )<br>  <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(body) &gt; <span class="hljs-number">0</span> &#123;<br>    span.SetAttributes(<br>        attribute.String(<span class="hljs-string">&quot;elastic.request.body&quot;</span>, <span class="hljs-type">string</span>(body)),<br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(es *EsUtil)</span></span> endTracer(err <span class="hljs-type">error</span>, status_code <span class="hljs-type">int</span>, body []<span class="hljs-type">byte</span>, span trace.Span) &#123;<br>  <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    span.RecordError(err)<br>    span.SetStatus(codes.Error, err.Error())<br>    <span class="hljs-keyword">return</span><br>  &#125;<br>  span.SetAttributes(<br>    attribute.Int(<span class="hljs-string">&quot;elastic.status&quot;</span>, status_code),<br>    attribute.String(<span class="hljs-string">&quot;elastic.response.body&quot;</span>, <span class="hljs-type">string</span>(body)),<br>  )<br>&#125;<br></code></pre></td></tr></table></figure><p>到此，从go-zero的服务A接收到一个请求，到由当前服务A发送出去的第一跳操作（HTTP、Elasticsearch、数据库等）都可以在jaerger里看到trace了，大概长这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">microserviceA<br>  |<br>  |--&gt; HTTP(蓝鲸CMDB)<br>  |--&gt; Elasticsearch<br>  |--&gt; PostgreSQL<br>  |--&gt; HTTP(蓝鲸CMDB)<br>  |--&gt; HTTP(蓝鲸CMDB)<br>  | ……<br></code></pre></td></tr></table></figure><p>此时我们发现，跨服务（A服务调用B服务）现在还是没有链路，单独看服务A的链路也有，服务B的链路也有，但AB没连起来。原因在于我们在链路传递参数的过程中，并没有把traceId、spanId传递到下一跳。自然下一跳和上一跳就没法连接起来了。</p><p>改造代码之前还是先看原理。</p><h2 id="Opentelemetry链路传递核心原理"><a href="#Opentelemetry链路传递核心原理" class="headerlink" title="Opentelemetry链路传递核心原理"></a>Opentelemetry链路传递核心原理</h2><p>先看一张在HTTP通信下，trace如何进行链路传递参数<br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fmonitor%2Fgozerojaeger%2F6.jpg"></p><p>链路传递数据时用到一个载体叫做propagators，什么是 Propagator？OpenTelemetry 是这样定义的</p><div class="note note-primary">            <p>Cross-cutting concerns send their state to the next process using Propagators, which are defined as objects used to read and write context data to and from messages exchanged by the applications.</p>          </div><p>大概意思就是：从系统的横向切入面看，通过定义一个可读可写的context对象，在应用间进行状态的传递。<br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fmonitor%2Fgozerojaeger%2Fopentelemetry.png"></p><p>这里还有一个Baggage的概念，但是本文暂未涉及到，因此不再赘述，示例代码只需要propagator就可以满足需求了</p><h2 id="Propagator注入trace实现链路信息传递"><a href="#Propagator注入trace实现链路信息传递" class="headerlink" title="Propagator注入trace实现链路信息传递"></a>Propagator注入trace实现链路信息传递</h2><p>服务A通过imroc&#x2F;req调用服务B（HTTP调用），需要在服务A端HTTP发起之前给propagator注入载体(carrier)，并写入HTTP headers，如下代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *HttpClient)</span></span> roundTripFunc(rt req.RoundTripper) req.RoundTripFunc &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(req *req.Request)</span></span> (resp *req.Response, err <span class="hljs-type">error</span>) &#123;<br>    <span class="hljs-comment">// 省略……</span><br>    spanCtx, span := c.Tracer.Start(req.Context(), spanName) <span class="hljs-comment">// 拿到关键的spanCtx</span><br>    <span class="hljs-keyword">defer</span> span.End()<br>    <span class="hljs-comment">// 最关键的一句话，把spanCtx里的trace信息inject到载体propagation.HeaderCarrier里，并通过HTTP headers传输</span><br>    otel.GetTextMapPropagator().Inject(spanCtx, propagation.HeaderCarrier(req.Headers))<br>    span.SetAttributes(<br>      <span class="hljs-comment">// 省略……</span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在服务B端，从HTTP headers中提取trace信息到载体(<code>carrier</code>)，并放入<code>context</code>里，这样就完成了应用之间的链路传递。这部分功能go-zero已经默认实现了，当开启了<code>Telemetry</code>后，go-zero会通过内置的trace中间件从载体中提取trace信息，这部分源码如下（<a href="https://github.com/zeromicro/go-zero/blob/v1.5.2/rest/handler/tracehandler.go%EF%BC%89%EF%BC%9A">https://github.com/zeromicro/go-zero/blob/v1.5.2/rest/handler/tracehandler.go）：</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// TraceHandler return a middleware that process the opentelemetry.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TraceHandler</span><span class="hljs-params">(serviceName, path <span class="hljs-type">string</span>, opts ...TraceOption)</span></span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(http.Handler)</span></span> http.Handler &#123;<br>  <span class="hljs-keyword">var</span> options traceOptions<br>  <span class="hljs-keyword">for</span> _, opt := <span class="hljs-keyword">range</span> opts &#123;<br>    opt(&amp;options)<br>  &#125;<br><br>  ignorePaths := collection.NewSet()<br>  ignorePaths.AddStr(options.traceIgnorePaths...)<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(next http.Handler)</span></span> http.Handler &#123;<br>    tracer := otel.Tracer(trace.TraceName)<br>    propagator := otel.GetTextMapPropagator()<br><br>    <span class="hljs-keyword">return</span> http.HandlerFunc(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>      spanName := path<br>      <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(spanName) == <span class="hljs-number">0</span> &#123;<br>        spanName = r.URL.Path<br>      &#125;<br><br>      <span class="hljs-keyword">if</span> ignorePaths.Contains(spanName) &#123;<br>        next.ServeHTTP(w, r)<br>        <span class="hljs-keyword">return</span><br>      &#125;<br><br>      ctx := propagator.Extract(r.Context(), propagation.HeaderCarrier(r.Header))<br>      spanCtx, span := tracer.Start(<br>        ctx,<br>        spanName,<br>        oteltrace.WithSpanKind(oteltrace.SpanKindServer),<br>        oteltrace.WithAttributes(semconv.HTTPServerAttributesFromHTTPRequest(<br>            serviceName, spanName, r)...),<br>      )<br>      <span class="hljs-keyword">defer</span> span.End()<br><br>      <span class="hljs-comment">// convenient for tracking error messages</span><br>      propagator.Inject(spanCtx, propagation.HeaderCarrier(w.Header()))<br><br>      trw := &amp;response.WithCodeResponseWriter&#123;Writer: w, Code: http.StatusOK&#125;<br>      next.ServeHTTP(trw, r.WithContext(spanCtx))<br><br>      span.SetAttributes(semconv.HTTPAttributesFromHTTPStatusCode(trw.Code)...)<br>      span.SetStatus(semconv.SpanStatusFromHTTPStatusCodeAndSpanKind(<br>        trw.Code, oteltrace.SpanKindServer))<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在打开jaeger页面，可以看到两个服务之间的链路已经连起来了<br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fmonitor%2Fgozerojaeger%2F7.jpg"></p><p>展开GetProjects，可以看到注入的header长这样<br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fmonitor%2Fgozerojaeger%2F8.png"></p>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
      <category>可观测性</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cloud native</tag>
      
      <tag>observability</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云原生链路跟踪工具Jaeger+OpenTelemetry Collector部署详解</title>
    <link href="/2023/04/04/cncf/monitor/jaeger/"/>
    <url>/2023/04/04/cncf/monitor/jaeger/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p>提到链路跟踪，或者叫全链路监控，或者叫APM(Application Performance Management)，具体含义和原理不赘述，开源方案有skywalking、zipkin、elasticapm等工具，商业产品有基调听云等等，但在云原生领域，也有一个CNCF已毕业项目jaeger同样发展迅速。</p>          </div><p><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fmonitor%2Fjaeger%2Fcncf_landscape.PNG"></p><p>本文将详细讲述如何在K8S环境部署一整套jaeger工具以实现链路跟踪。同时由于jaeger-ui里的monitor功能需要使用到OpenTelemetry Collector，因此本文将一并部署并讲解原理。</p><h1 id="Jaeger架构"><a href="#Jaeger架构" class="headerlink" title="Jaeger架构"></a>Jaeger架构</h1><p><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fmonitor%2Fjaeger%2Fjaeger_arch.png"></p><p>jaeger组件总共有四个：</p><ul><li>jaeger-agent</li><li>jaeger-collector</li><li>jaeger-query(ui)</li><li>jaeger-spark-dependencies</li></ul><p>其中jaeger-agent和应用部署在一个主机上或者一个容器pod里。在实际应用中，jaeger-agent通常已经集成到应用框架里了（如go-zero自带jaeger），或者由opentelemetry SDK（如kotlin或springboot）实现，因此无需额外再部署jaeger-agent。</p><p>jaeger-collector是收集trace的组件，它可提供多种收集方式，本文介绍两种：zipkin方式（监听在9411）和jaeger方式（监听在14268）。</p><p>jaeger将trace存储到数据库，可支持多种关系型和非关系型数据库，本文将使用elasticsearch-7.15做数据存储。</p><h1 id="Jaeger部署"><a href="#Jaeger部署" class="headerlink" title="Jaeger部署"></a>Jaeger部署</h1><h2 id="部署jaeger-collector"><a href="#部署jaeger-collector" class="headerlink" title="部署jaeger-collector"></a>部署jaeger-collector</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">jaeger-collector</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">jaeger-test</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">jaeger</span><br>    <span class="hljs-attr">app.kubernetes.io/component:</span> <span class="hljs-string">collector</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">jaeger</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">deployment.kubernetes.io/revision:</span> <span class="hljs-string">&#x27;15&#x27;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">jaeger</span><br>      <span class="hljs-attr">app.kubernetes.io/component:</span> <span class="hljs-string">collector</span><br>      <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">jaeger</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">jaeger</span><br>        <span class="hljs-attr">app.kubernetes.io/component:</span> <span class="hljs-string">collector</span><br>        <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">jaeger</span><br>      <span class="hljs-attr">annotations:</span><br>        <span class="hljs-attr">kubesphere.io/restartedAt:</span> <span class="hljs-string">&#x27;2023-04-04T07:05:11.313Z&#x27;</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">jaeger-configuration-volume</span><br>          <span class="hljs-attr">configMap:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">jaeger-configuration</span><br>            <span class="hljs-attr">items:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">collector</span><br>                <span class="hljs-attr">path:</span> <span class="hljs-string">collector.yaml</span><br>            <span class="hljs-attr">defaultMode:</span> <span class="hljs-number">420</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">jaeger-collector</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">&gt;-</span><br><span class="hljs-string">            jaegertracing/jaeger-collector:1.43</span><br><span class="hljs-string"></span>          <span class="hljs-attr">args:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;--config-file=/conf/collector.yaml&#x27;</span><br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">14267</span><br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">14268</span><br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9411</span><br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">14250</span><br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">SPAN_STORAGE_TYPE</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">configMapKeyRef:</span><br>                  <span class="hljs-attr">name:</span> <span class="hljs-string">jaeger-configuration</span><br>                  <span class="hljs-attr">key:</span> <span class="hljs-string">span-storage-type</span><br>          <span class="hljs-attr">resources:</span> &#123;&#125;<br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">jaeger-configuration-volume</span><br>              <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/conf</span><br>          <span class="hljs-attr">terminationMessagePath:</span> <span class="hljs-string">/dev/termination-log</span><br>          <span class="hljs-attr">terminationMessagePolicy:</span> <span class="hljs-string">File</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br>      <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">ClusterFirst</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">default</span><br>      <span class="hljs-attr">serviceAccount:</span> <span class="hljs-string">default</span><br>      <span class="hljs-attr">securityContext:</span> &#123;&#125;<br>      <span class="hljs-attr">schedulerName:</span> <span class="hljs-string">default-scheduler</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">progressDeadlineSeconds:</span> <span class="hljs-number">600</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">jaeger-collector</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">jaeger-test</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">jaeger-collector</span><br>  <span class="hljs-attr">annotations:</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">jaeger-collector-tchannel</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">14267</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">14267</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">jaeger-collector-http</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">14268</span>  <span class="hljs-comment"># jaeger agent通过http将trace送到此端口</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">14268</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">jaeger-collector-zipkin</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">9411</span>  <span class="hljs-comment"># opentelemetry通过http将trace送到此端口</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">9411</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">jaeger-grpc</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">14250</span>  <span class="hljs-comment"># opentelemetry collector通过grpc将trace送到此端口</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">14250</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">jaeger</span><br>    <span class="hljs-attr">app.kubernetes.io/component:</span> <span class="hljs-string">collector</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">jaeger</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-number">10.96</span><span class="hljs-number">.73</span><span class="hljs-number">.35</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br>  <span class="hljs-attr">sessionAffinity:</span> <span class="hljs-string">None</span><br></code></pre></td></tr></table></figure><p>其中用到的collector.yaml以configmap的方式挂载到容器的&#x2F;conf&#x2F;collector.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># collector.yaml</span><br><span class="hljs-attr">es:</span><br>  <span class="hljs-attr">server-urls:</span> <span class="hljs-string">http://es.xxx.io</span> <span class="hljs-comment"># 需要有一个es</span><br>  <span class="hljs-attr">username:</span> <span class="hljs-string">elastic</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-string">&#x27;***********&#x27;</span><br><span class="hljs-attr">exporters:</span><br>  <span class="hljs-attr">opentelemetry:</span><br>    <span class="hljs-attr">endpoint:</span> <span class="hljs-string">&quot;otel-collector:55678&quot;</span><br><span class="hljs-attr">collector:</span><br>  <span class="hljs-attr">zipkin:</span><br>    <span class="hljs-attr">http-port:</span> <span class="hljs-number">9411</span>  <span class="hljs-comment"># zipkin方式收集trace</span><br>  <span class="hljs-attr">jaeger:</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">host-port:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">:14269</span>  <span class="hljs-comment"># jaeger admin HTTP server（没用上）</span><br></code></pre></td></tr></table></figure><h2 id="部署jaeger-query"><a href="#部署jaeger-query" class="headerlink" title="部署jaeger-query"></a>部署jaeger-query</h2><p>jaeger-query是前端界面</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">jaeger-query</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">jaeger-test</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">jaeger</span><br>    <span class="hljs-attr">jaeger-infra:</span> <span class="hljs-string">query-deployment</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">deployment.kubernetes.io/revision:</span> <span class="hljs-string">&#x27;5&#x27;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">jaeger</span><br>      <span class="hljs-attr">jaeger-infra:</span> <span class="hljs-string">query-pod</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">jaeger</span><br>        <span class="hljs-attr">jaeger-infra:</span> <span class="hljs-string">query-pod</span><br>      <span class="hljs-attr">annotations:</span><br>        <span class="hljs-attr">prometheus.io/port:</span> <span class="hljs-string">&#x27;16686&#x27;</span><br>        <span class="hljs-attr">prometheus.io/scrape:</span> <span class="hljs-string">&#x27;true&#x27;</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">jaeger-configuration-volume</span><br>          <span class="hljs-attr">configMap:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">jaeger-configuration</span><br>            <span class="hljs-attr">items:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">query</span><br>                <span class="hljs-attr">path:</span> <span class="hljs-string">query.yaml</span><br>            <span class="hljs-attr">defaultMode:</span> <span class="hljs-number">420</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">jaeger-query</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">&gt;-</span><br><span class="hljs-string">            jaegertracing/jaeger-query:1.43</span><br><span class="hljs-string"></span>          <span class="hljs-attr">args:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;--config-file=/conf/query.yaml&#x27;</span><br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">16686</span><br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">16685</span><br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">16687</span><br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">SPAN_STORAGE_TYPE</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">configMapKeyRef:</span><br>                  <span class="hljs-attr">name:</span> <span class="hljs-string">jaeger-configuration</span><br>                  <span class="hljs-attr">key:</span> <span class="hljs-string">span-storage-type</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">METRICS_STORAGE_TYPE</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">prometheus</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">PROMETHEUS_SERVER_URL</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&#x27;http://10.50.89.17:8080&#x27;</span><br>          <span class="hljs-attr">resources:</span> &#123;&#125;<br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">jaeger-configuration-volume</span><br>              <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/conf</span><br>          <span class="hljs-attr">terminationMessagePath:</span> <span class="hljs-string">/dev/termination-log</span><br>          <span class="hljs-attr">terminationMessagePolicy:</span> <span class="hljs-string">File</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br>      <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">ClusterFirst</span><br>      <span class="hljs-attr">securityContext:</span> &#123;&#125;<br>      <span class="hljs-attr">schedulerName:</span> <span class="hljs-string">default-scheduler</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">progressDeadlineSeconds:</span> <span class="hljs-number">600</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">jaeger-query</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">jaeger-test</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">jaeger-query</span><br>  <span class="hljs-attr">annotations:</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">jaeger-grpc</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">16685</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">16685</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">jaeger-query</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">16686</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">16686</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">jaeger-admin</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">16687</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">16687</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">jaeger</span><br>    <span class="hljs-attr">jaeger-infra:</span> <span class="hljs-string">query-pod</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-number">10.96</span><span class="hljs-number">.161</span><span class="hljs-number">.39</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br>  <span class="hljs-attr">sessionAffinity:</span> <span class="hljs-string">None</span><br></code></pre></td></tr></table></figure><p>其中两个环境变量很重要：<br>METRICS_STORAGE_TYPE：设置此值为prometheus才能开启UI上的monitor页面<br>PROMETHEUS_SERVER_URL：设置prometheus地址，monitor数据将从该prometheus上获取<br>再设置一个ingress或者nodeport暴露query的16686端口即可<br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fmonitor%2Fjaeger%2F1.png"></p><p>此时还没有任何trace数据</p><h2 id="部署jaeger-spark-dependencies"><a href="#部署jaeger-spark-dependencies" class="headerlink" title="部署jaeger-spark-dependencies"></a>部署jaeger-spark-dependencies</h2><p>这是一个计算链路图的组件，他周期性的从elasticsearch读取trace并计算依赖链路，然后再写回elasticsearch的jaeger-dependencies索引。</p><h1 id="应用接入"><a href="#应用接入" class="headerlink" title="应用接入"></a>应用接入</h1><h2 id="go-zero应用接入"><a href="#go-zero应用接入" class="headerlink" title="go-zero应用接入"></a>go-zero应用接入</h2><p>配置文件中增加jaeger相关模块：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Name:</span> <span class="hljs-string">Devops</span><br><span class="hljs-attr">Host:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-attr">Port:</span> <span class="hljs-number">8888</span><br><span class="hljs-attr">Timeout:</span> <span class="hljs-number">60000</span><br><span class="hljs-attr">Log:</span><br>  <span class="hljs-attr">Encoding:</span> <span class="hljs-string">plain</span><br>  <span class="hljs-attr">Level:</span> <span class="hljs-string">debug</span> <br><span class="hljs-attr">Prometheus:</span><br>  <span class="hljs-attr">Host:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br>  <span class="hljs-attr">Port:</span> <span class="hljs-number">10990</span><br>  <span class="hljs-attr">Path:</span> <span class="hljs-string">/metrics</span><br><span class="hljs-attr">Namespace:</span> <span class="hljs-string">jaeger-test</span><br><span class="hljs-attr">Kubeconfig:</span> <span class="hljs-string">./kubeconfig</span><br><span class="hljs-attr">Environment:</span> <span class="hljs-string">local</span><br><span class="hljs-attr">Telemetry:</span><br>  <span class="hljs-attr">Name:</span> <span class="hljs-string">fiops-devops</span><br>  <span class="hljs-attr">Endpoint:</span> <span class="hljs-string">http://jaeger-collector.jaeger-test:14268/api/traces</span><br>  <span class="hljs-attr">Sampler:</span> <span class="hljs-number">1.0</span><br>  <span class="hljs-attr">Batcher:</span> <span class="hljs-string">jaeger</span><br></code></pre></td></tr></table></figure><p>再在UI查看<br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fmonitor%2Fjaeger%2F2.png"></p><h2 id="opentelemetry接入"><a href="#opentelemetry接入" class="headerlink" title="opentelemetry接入"></a>opentelemetry接入</h2><p>启动参数增加：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">-Dotel.propagators=b3<br>-Dotel.instrumentation.common.default-enabled=true<br>-javaagent:/path/to/you/opentelemetry-javaagent.jar<br>-Dotel.instrumentation.common.db-statement-sanitizer.enabled=false<br>-Dotel.instrumentation.redisson.enabled=false<br>-Dotel.metrics.exporter=none <br>-Dotel.traces.exporter=zipkin <br>-Dotel.exporter.zipkin.endpoint=http://jaeger-collector.jaeger-test:9411/api/v2/spans<br></code></pre></td></tr></table></figure><p>注意最后的zipkin.endpoint指向了jaeger-collector的9411端口</p><p>UI查看<br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fmonitor%2Fjaeger%2F3.png"></p><h1 id="elasticsearch配置"><a href="#elasticsearch配置" class="headerlink" title="elasticsearch配置"></a>elasticsearch配置</h1><p>jaeger会在elasticsearch里创建三个索引模板：</p><ul><li>jaeger-service：存放所有已收集的serviceName</li><li>jaeger-span：存放trace数据，每个doc是一个span</li><li>Jaeger-dependencies：存放spark计算后的依赖图</li></ul><p>jaeger提供两种方式的索引管理，一个是rollover、一个是ILM</p><h2 id="rollover方式（默认方式）"><a href="#rollover方式（默认方式）" class="headerlink" title="rollover方式（默认方式）"></a>rollover方式（默认方式）</h2><p>该方式jaeger默认每天创建一个带日期后缀的索引，如：jaeger-span-2023-04-04，可查看其数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jaeger-span-2023-04-04&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mu72SocBT2RQOvh7w_S0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;traceID&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;8323e388f8a172e5e404e6873906f4e4&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;spanID&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;229debb8161b9693&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;operationName&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/shelltrade/(authenticate jwttokenfilterwithoutobject)/loadbycriteria&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;references&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;refType&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CHILD_OF&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;traceID&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;8323e388f8a172e5e404e6873906f4e4&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;spanID&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;453b0488ff74aca4&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;startTime&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1680589895699132</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;startTimeMillis&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1680589895699</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;duration&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">26024</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;tags&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http.user_agent&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;string&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Ktor client&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;net.host.name&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;string&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;trd-http-server-6644f77644-gdx4x&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;logs&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;process&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;serviceName&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;trd-http-server&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;tags&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>          <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;key&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ip&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;int64&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;168464409&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>关于rollover配置参考：<br><a href="https://www.jaegertracing.io/docs/1.43/deployment/#elasticsearch-rollover">https://www.jaegertracing.io/docs/1.43/deployment/#elasticsearch-rollover</a></p><h2 id="ILM方式（推荐）"><a href="#ILM方式（推荐）" class="headerlink" title="ILM方式（推荐）"></a>ILM方式（推荐）</h2><h3 id="创建策略"><a href="#创建策略" class="headerlink" title="创建策略"></a>创建策略</h3><p>手工在ES创建一个ILM策略，名称必须叫：<code>jaeger-ilm-policy</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -X PUT http://ESHOST:9200/_ilm/policy/jaeger-ilm-policy \<br>-H &#x27;Content-Type: application/json; charset=utf-8&#x27; \<br>--data-binary @- &lt;&lt; EOF<br>&#123;<br>  &quot;policy&quot;: &#123;<br>    &quot;phases&quot;: &#123;<br>      &quot;hot&quot;: &#123;<br>        &quot;min_age&quot;: &quot;0ms&quot;,<br>        &quot;actions&quot;: &#123;<br>          &quot;rollover&quot;: &#123;<br>            &quot;max_age&quot;: &quot;1d&quot;<br>          &#125;,<br>          &quot;set_priority&quot;: &#123;<br>            &quot;priority&quot;: 100<br>          &#125;<br>        &#125;<br>      &#125;,<br>      &quot;delete&quot;: &#123;<br>        &quot;min_age&quot;: &quot;3d&quot;,<br>        &quot;actions&quot;: &#123;<br>          &quot;delete&quot;: &#123;&#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><h3 id="初始化索引"><a href="#初始化索引" class="headerlink" title="初始化索引"></a>初始化索引</h3><p>在K8S创建Job，配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">batch/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Job</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">jaeger-es-rollover</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">jaeger-test</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">es-rollover-container</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">jaegertracing/jaeger-es-rollover:1.43</span><br>        <span class="hljs-attr">args:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;--es.username=elastic&#x27;</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;--es.password=DtvUvl7k80bX5aL9&#x27;</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">init</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;http://es.xxx.io&#x27;</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ES_USE_ILM</span><br>            <span class="hljs-attr">value:</span> <span class="hljs-string">&#x27;true&#x27;</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">200m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">200Mi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">100Mi</span><br>        <span class="hljs-attr">terminationMessagePath:</span> <span class="hljs-string">/dev/termination-log</span><br>        <span class="hljs-attr">terminationMessagePolicy:</span> <span class="hljs-string">File</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Never</span><br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br>      <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">ClusterFirst</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">default</span><br>      <span class="hljs-attr">serviceAccount:</span> <span class="hljs-string">default</span><br>      <span class="hljs-attr">securityContext:</span> &#123;&#125;<br>      <span class="hljs-attr">schedulerName:</span> <span class="hljs-string">default-scheduler</span><br>  <span class="hljs-attr">parallelism:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">completions:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">backoffLimit:</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h3 id="配置collector和query参数"><a href="#配置collector和query参数" class="headerlink" title="配置collector和query参数"></a>配置collector和query参数</h3><p>先将jaeger-collector的pod副本降为0，使得collector不再往ES写入，然后删除之前已经存在的三个index template和所有jaeger-开头的索引。然后在jaeger-collector和jaeger-query的启动参数加上<code>--es.use-ilm=true</code>和<code>--es.use-aliases=true</code>，或者在它们的yaml配置文件里增加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">es:</span><br>  <span class="hljs-attr">use-ilm:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">use-aliases:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>做完上面的步骤后调大jaeger-collector的pod副本数，观察ES重新创建了三个index template，并且已经自动关联上了上一步手动创建的ILM policy<br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fmonitor%2Fjaeger%2F4.jpg"></p><p>观察索引已经出现了-000001，配置成功<br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fmonitor%2Fjaeger%2F5.jpg"></p><p>关于ILM配置参考：<br><a href="https://www.jaegertracing.io/docs/1.43/deployment/#elasticsearch-ilm-support">https://www.jaegertracing.io/docs/1.43/deployment/#elasticsearch-ilm-support</a></p><h1 id="Service-Performance-Monitoring-SPM"><a href="#Service-Performance-Monitoring-SPM" class="headerlink" title="Service Performance Monitoring (SPM)"></a>Service Performance Monitoring (SPM)</h1><p>jaeger还可对trace进行聚合统计，计算出RED(Request, Error, Duration) metrics，并展示在UI的monitor页面。<br>此功能依赖另外一个组件OpenTelemetry Collector，接入后整体流程如下：<br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fmonitor%2Fjaeger%2F6.png"></p><p>此时应用不再将trace发往jaeger-collector，而是将trace发送到OpenTelemetry Collector（下文简称otel-collocter），otel-collocter分两路走，一路将trace原封不动发送到jaeger-collocter（由它去展示trace），另一路经过它自己内部的一个pipeline，计算出calls_total、latency_bucket等metrics，并通过自己的8889&#x2F;metrics暴露出去，prometheus配置一个job采集它的8889&#x2F;metrics，然后jaeger-query再去prometheus取回这些metrics，并展示到UI的monitor页面。</p><p>参考：<a href="https://github.com/jaegertracing/jaeger/tree/main/docker-compose/monitor">https://github.com/jaegertracing/jaeger/tree/main/docker-compose/monitor</a></p><h2 id="部署OpenTelemetry-Collector"><a href="#部署OpenTelemetry-Collector" class="headerlink" title="部署OpenTelemetry Collector"></a>部署OpenTelemetry Collector</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">otel-collector</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">jaeger-test</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">otel-collector</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">deployment.kubernetes.io/revision:</span> <span class="hljs-string">&#x27;51&#x27;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">otel-collector</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">otel-collector</span><br>      <span class="hljs-attr">annotations:</span><br>        <span class="hljs-attr">kubesphere.io/restartedAt:</span> <span class="hljs-string">&#x27;2023-04-04T09:05:57.517Z&#x27;</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">otel-collector-volume</span><br>          <span class="hljs-attr">configMap:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">jaeger-configuration</span><br>            <span class="hljs-attr">defaultMode:</span> <span class="hljs-number">420</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">otel-collector-container</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">&gt;-</span><br><span class="hljs-string">            otel/opentelemetry-collector-contrib:0.74.0</span><br><span class="hljs-string"></span>          <span class="hljs-attr">args:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;--config&#x27;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/otel-collector-config.yml</span><br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">otel-port</span><br>              <span class="hljs-attr">containerPort:</span> <span class="hljs-number">4317</span>  <span class="hljs-comment"># 此端口没用上</span><br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">metrics</span><br>              <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8888</span>  <span class="hljs-comment"># otel-collector自己的metrics</span><br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">exporter</span>       <span class="hljs-comment"># otel-collector计算trace统计值后通过此端口暴露出去</span><br>              <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8889</span><br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">collector</span>      <span class="hljs-comment"># 应用向otel-collector:14278发送trace数据</span><br>              <span class="hljs-attr">containerPort:</span> <span class="hljs-number">14278</span><br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">zipkin</span>         <span class="hljs-comment"># 应用通过zipkin方式发送trace到9411</span><br>              <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9411</span><br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">resources:</span><br>            <span class="hljs-attr">limits:</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">200m</span><br>              <span class="hljs-attr">memory:</span> <span class="hljs-string">500Mi</span><br>            <span class="hljs-attr">requests:</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>              <span class="hljs-attr">memory:</span> <span class="hljs-string">200Mi</span><br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">otel-collector-volume</span><br>              <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/otel-collector-config.yml</span><br>              <span class="hljs-attr">subPath:</span> <span class="hljs-string">otel-collector-config.yml</span><br>          <span class="hljs-attr">terminationMessagePath:</span> <span class="hljs-string">/dev/termination-log</span><br>          <span class="hljs-attr">terminationMessagePolicy:</span> <span class="hljs-string">File</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br>      <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">ClusterFirst</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">default</span><br>      <span class="hljs-attr">serviceAccount:</span> <span class="hljs-string">default</span><br>      <span class="hljs-attr">securityContext:</span> &#123;&#125;<br>      <span class="hljs-attr">schedulerName:</span> <span class="hljs-string">default-scheduler</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">progressDeadlineSeconds:</span> <span class="hljs-number">600</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">otel-collector</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">jaeger-test</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">otel-collector</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">kubesphere.io/creator:</span> <span class="hljs-string">fanpengfei</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http-4317</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">4317</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">4317</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http-8888</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">8888</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8888</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http-14278</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">14278</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">14278</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http-8889</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">8889</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8889</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http-55678</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">55678</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">55678</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http-zipkin</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">9411</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">9411</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">otel-collector</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-number">10.96</span><span class="hljs-number">.7</span><span class="hljs-number">.76</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br>  <span class="hljs-attr">sessionAffinity:</span> <span class="hljs-string">None</span><br></code></pre></td></tr></table></figure><p>otel-collector的配置文件如下。一个otel-collector由receivers、exporters、processors三部分组成，其中receivers定义了jaeger输入(监听在14278)、zipkin输入(监听在9411)和otlp输入(本文未使用otlp)。exporters定义了输出有三条路径，prometheus(即普米从本机 <a href="http://xx:8889/metrics">http://xx:8889/metrics</a> 采走)、zipkin(zipkin方式过来的trace统计计算需要发送到本机监听的9411)、jaeger(trace原样输出到jaeger)。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># otel-collector-config.yml</span><br><span class="hljs-attr">receivers:</span><br>  <span class="hljs-attr">jaeger:</span><br>    <span class="hljs-attr">protocols:</span><br>      <span class="hljs-attr">thrift_http:</span><br>        <span class="hljs-attr">endpoint:</span> <span class="hljs-string">&quot;0.0.0.0:14278&quot;</span><br>  <span class="hljs-attr">zipkin:</span><br>    <span class="hljs-attr">endpoint:</span> <span class="hljs-string">&quot;0.0.0.0:9411&quot;</span><br>  <span class="hljs-attr">otlp:</span><br>    <span class="hljs-attr">protocols:</span><br>      <span class="hljs-attr">grpc:</span><br>      <span class="hljs-attr">http:</span><br><br>  <span class="hljs-comment"># Dummy receiver that&#x27;s never used, because a pipeline is required to have one.</span><br>  <span class="hljs-attr">otlp/spanmetrics:</span><br>    <span class="hljs-attr">protocols:</span><br>      <span class="hljs-attr">grpc:</span><br>        <span class="hljs-attr">endpoint:</span> <span class="hljs-string">&quot;localhost:65535&quot;</span><br><br><span class="hljs-attr">exporters:</span><br>  <span class="hljs-attr">prometheus:</span><br>    <span class="hljs-attr">endpoint:</span> <span class="hljs-string">&quot;0.0.0.0:8889&quot;</span><br>  <span class="hljs-attr">zipkin:</span><br>    <span class="hljs-attr">endpoint:</span> <span class="hljs-string">&quot;http://localhost:9411/api/v2/spans&quot;</span><br>  <span class="hljs-attr">jaeger:</span><br>    <span class="hljs-attr">endpoint:</span> <span class="hljs-string">&quot;jaeger-collector:14250&quot;</span><br>    <span class="hljs-attr">tls:</span><br>      <span class="hljs-attr">insecure:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-attr">processors:</span><br>  <span class="hljs-attr">batch:</span><br>  <span class="hljs-attr">spanmetrics:</span><br>    <span class="hljs-attr">metrics_exporter:</span> <span class="hljs-string">prometheus</span><br><br><span class="hljs-attr">service:</span><br>  <span class="hljs-attr">pipelines:</span><br>    <span class="hljs-attr">traces:</span><br>      <span class="hljs-attr">receivers:</span> [<span class="hljs-string">jaeger</span>, <span class="hljs-string">zipkin</span>]<br>      <span class="hljs-attr">processors:</span> [<span class="hljs-string">spanmetrics</span>, <span class="hljs-string">batch</span>]<br>      <span class="hljs-attr">exporters:</span> [<span class="hljs-string">jaeger</span>]<br>    <span class="hljs-comment"># The exporter name in this pipeline must match the spanmetrics.metrics_exporter name.</span><br>    <span class="hljs-comment"># The receiver is just a dummy and never used; added to pass validation requiring at least one receiver in a pipeline.</span><br>    <span class="hljs-attr">metrics/spanmetrics:</span><br>      <span class="hljs-attr">receivers:</span> [<span class="hljs-string">otlp/spanmetrics</span>]<br>      <span class="hljs-attr">exporters:</span> [<span class="hljs-string">prometheus</span>]<br></code></pre></td></tr></table></figure><h2 id="对接prometheus"><a href="#对接prometheus" class="headerlink" title="对接prometheus"></a>对接prometheus</h2><p>应用发送trace到otel-collector以后，可在otel-collector的8889看到metrics，说明聚合统计已经生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl http:/otel-collector:8889/metrics<br><span class="hljs-meta prompt_"># </span><span class="language-bash">HELP calls_total</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">TYPE calls_total counter</span><br>calls_total&#123;operation=&quot;/callback&quot;,service_name=&quot;auth-http-server&quot;,span_kind=&quot;SPAN_KIND_SERVER&quot;,status_code=&quot;STATUS_CODE_UNSET&quot;&#125; 1<br>calls_total&#123;operation=&quot;/checkjwtinredis&quot;,service_name=&quot;auth-http-server&quot;,span_kind=&quot;SPAN_KIND_SERVER&quot;,status_code=&quot;STATUS_CODE_UNSET&quot;&#125; 840<br>calls_total&#123;operation=&quot;/getobjectlist&quot;,service_name=&quot;auth-http-server&quot;,span_kind=&quot;SPAN_KIND_SERVER&quot;,status_code=&quot;STATUS_CODE_UNSET&quot;&#125; 74<br><span class="hljs-meta prompt_"># </span><span class="language-bash">HELP latency</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">TYPE latency histogram</span><br>latency_bucket&#123;operation=&quot;/callback&quot;,service_name=&quot;auth-http-server&quot;,span_kind=&quot;SPAN_KIND_SERVER&quot;,status_code=&quot;STATUS_CODE_UNSET&quot;,le=&quot;2&quot;&#125; 0<br>latency_bucket&#123;operation=&quot;/callback&quot;,service_name=&quot;auth-http-server&quot;,span_kind=&quot;SPAN_KIND_SERVER&quot;,status_code=&quot;STATUS_CODE_UNSET&quot;,le=&quot;4&quot;&#125; 0<br>latency_bucket&#123;operation=&quot;/callback&quot;,service_name=&quot;auth-http-server&quot;,span_kind=&quot;SPAN_KIND_SERVER&quot;,status_code=&quot;STATUS_CODE_UNSET&quot;,le=&quot;6&quot;&#125; 0<br>latency_sum&#123;operation=&quot;/callback&quot;,service_name=&quot;auth-http-server&quot;,span_kind=&quot;SPAN_KIND_SERVER&quot;,status_code=&quot;STATUS_CODE_UNSET&quot;&#125; 192.146<br>latency_count&#123;operation=&quot;/callback&quot;,service_name=&quot;auth-http-server&quot;,span_kind=&quot;SPAN_KIND_SERVER&quot;,status_code=&quot;STATUS_CODE_UNSET&quot;&#125; 1<br>latency_bucket&#123;operation=&quot;/checkjwtinredis&quot;,service_name=&quot;auth-http-server&quot;,span_kind=&quot;SPAN_KIND_SERVER&quot;,status_code=&quot;STATUS_CODE_UNSET&quot;,le=&quot;2&quot;&#125; 816<br>latency_bucket&#123;operation=&quot;/checkjwtinredis&quot;,service_name=&quot;auth-http-server&quot;,span_kind=&quot;SPAN_KIND_SERVER&quot;,status_code=&quot;STATUS_CODE_UNSET&quot;,le=&quot;4&quot;&#125; 832<br>latency_bucket&#123;operation=&quot;/checkjwtinredis&quot;,service_name=&quot;auth-http-server&quot;,span_kind=&quot;SPAN_KIND_SERVER&quot;,status_code=&quot;STATUS_CODE_UNSET&quot;,le=&quot;6&quot;&#125; 834<br></code></pre></td></tr></table></figure><p>现在可在prometheus.yaml配置job：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># prometheus.yaml</span><br><span class="hljs-attr">scrape_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">aggregated-trace-metrics</span><br>    <span class="hljs-attr">static_configs:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&#x27;otel-exporter.jaeger-test.xxx.io&#x27;</span>]<br></code></pre></td></tr></table></figure><p>otel-exporter.jaeger-test.xxx.io是我的K8S给otel-collector:8889配置的ingress地址<br>重新加载配置后，可在jaeger-ui的monitor页面查看<br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fmonitor%2Fjaeger%2F7.png"></p>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
      <category>可观测性</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cloud native</tag>
      
      <tag>observability</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>K8S Rook Ceph StorageClass</title>
    <link href="/2022/05/29/cncf/kubernetes/storage/rook-ceph/"/>
    <url>/2022/05/29/cncf/kubernetes/storage/rook-ceph/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://rook.io/">https://rook.io/</a></p></blockquote><h1 id="什么是Rook"><a href="#什么是Rook" class="headerlink" title="什么是Rook"></a>什么是Rook</h1><p><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fk8s%2Fstorage%2Frook-home.png"><br>Rook是CNCF已经毕业的云原生存储方案<br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fk8s%2Fstorage%2Fwhat_is_rook.png"></p><h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><p>Rook Ceph将每个k8s节点上的块存储联合成一体作为分布式存储，为k8s提供StorageClass，这样的k8s节点由于同时提供了计算、网络、存储，因此也被称作为超融合节点。<br>为了使用Rook Ceph，k8s集群必须满足的条件有：</p><ul><li>至少三个node</li><li>节点提供块存储，满足下列条件之一<ul><li>Raw devices (no partitions or formatted filesystems)</li><li>Raw partitions (no formatted filesystem)</li><li>PVs available from a storage class in block mode</li></ul></li></ul><p>我们选择第一个方式提供Raw devices，为每个节点添加一块盘sdb，不对该盘做任何分区操作，也不格式化文件系统：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">lsblk -f<br>NAME                      FSTYPE      LABEL UUID                                   FSAVAIL FSUSE% MOUNTPOINT                                                      0   100% /snap/snapd/15904<br>sda<br>├─sda1<br>├─sda2                    ext4              00c05ca1-7dd5-41d1-8ae6-c7deb56cde25    800.9M    11% /boot<br>└─sda3                    LVM2_member       1NgIKw-CZDb-6t8t-cIMZ-iHYa-jACV-MQIYnR<br>  └─ubuntu--vg-ubuntu--lv ext4              6686cd41-a6f4-45a7-a564-5581507cd252     10.7G    34% /<br>sdb<br></code></pre></td></tr></table></figure><p>用lsblk看sdb没有FSTYPE</p><h1 id="部署Rook-Operator"><a href="#部署Rook-Operator" class="headerlink" title="部署Rook Operator"></a>部署Rook Operator</h1><p>下载资源文件，并部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone --single-branch --branch v1.9.4 https://github.com/rook/rook.git<br>cd rook/deploy/examples<br>kubectl create -f crds.yaml -f common.yaml -f operator.yaml<br>kubectl get pods -n rook-ceph<br>rook-ceph-operator-799cd7d684-fzwxb                               1/1     Running     0              18h<br></code></pre></td></tr></table></figure><h1 id="部署Rook-Ceph-Cluster"><a href="#部署Rook-Ceph-Cluster" class="headerlink" title="部署Rook Ceph Cluster"></a>部署Rook Ceph Cluster</h1><p>编辑cluster.yaml，修改spec.storage.deviceFilter，改为sdb。deviceFilter还可以写正则表达式，详见：<a href="https://rook.io/docs/rook/v1.9/CRDs/ceph-cluster-crd/?h=devicefilter#storage-selection-settings">https://rook.io/docs/rook/v1.9/CRDs/ceph-cluster-crd/?h=devicefilter#storage-selection-settings</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">……</span>  <br>  <span class="hljs-attr">storage:</span> <span class="hljs-comment"># cluster level storage configuration and selection</span><br>    <span class="hljs-attr">useAllNodes:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">useAllDevices:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">deviceFilter:</span> <span class="hljs-string">sdb</span><br></code></pre></td></tr></table></figure><p>接下来部署cluster</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd rook/deploy/examples<br>kubectl apply -f cluster.yaml<br></code></pre></td></tr></table></figure><p>查看pod是否运行。注意下面很多镜像都是从k8s.gcr.io下载的，需要翻墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get pods -n rook-ceph<br>NAME                                                              READY   STATUS      RESTARTS         AGE<br>csi-cephfsplugin-jhtt7                                            3/3     Running     3 (21h ago)      21h<br>csi-cephfsplugin-p4chb                                            3/3     Running     4 (26h ago)      4d20h<br>csi-cephfsplugin-provisioner-7577bb4d59-dmv7m                     6/6     Running     9 (63m ago)      19h<br>csi-cephfsplugin-provisioner-7577bb4d59-gr8qk                     6/6     Running     13 (4h10m ago)   19h<br>csi-cephfsplugin-txhqp                                            3/3     Running     2 (25h ago)      4d20h<br>csi-rbdplugin-5z5nd                                               3/3     Running     3 (21h ago)      21h<br>csi-rbdplugin-cqnr7                                               3/3     Running     4 (25h ago)      4d20h<br>csi-rbdplugin-provisioner-847b498845-bxswz                        6/6     Running     9 (63m ago)      19h<br>csi-rbdplugin-provisioner-847b498845-vfplt                        6/6     Running     14 (4h10m ago)   19h<br>csi-rbdplugin-s6nlj                                               3/3     Running     2 (26h ago)      4d20h<br>rook-ceph-crashcollector-k8s-node1.lab.example.com-8b77cffwnjgt   1/1     Running     0                4h11m<br>rook-ceph-crashcollector-k8s-node2.lab.example.com-9d755bdddmcc   1/1     Running     0                19h<br>rook-ceph-crashcollector-k8s-node3.lab.example.com-6dbb64b65s5t   1/1     Running     0                4h13m<br>rook-ceph-mgr-a-78cd6b9ffb-j8r9w                                  2/2     Running     4 (63m ago)      4h13m<br>rook-ceph-mgr-b-79476687d8-9hfft                                  2/2     Running     43 (26m ago)     19h<br>rook-ceph-mon-a-c7c674d76-znxzx                                   1/1     Running     48 (26m ago)     19h<br>rook-ceph-mon-b-5df5487d9f-z7rnb                                  1/1     Running     4 (63m ago)      4h15m<br>rook-ceph-mon-c-6d8968ff95-h2vqp                                  1/1     Running     8 (30m ago)      19h<br>rook-ceph-operator-799cd7d684-fzwxb                               1/1     Running     0                19h<br>rook-ceph-osd-0-5dc6988c7b-l69vx                                  1/1     Running     8 (30m ago)      19h<br>rook-ceph-osd-1-5777f4dc9d-cl48b                                  1/1     Running     43 (26m ago)     19h<br>rook-ceph-osd-2-75688c47d-nfbqx                                   1/1     Running     5 (30m ago)      4h15m<br>rook-ceph-osd-prepare-k8s-node1.lab.example.com-5j4b2             0/1     Completed   0                166m<br>rook-ceph-osd-prepare-k8s-node2.lab.example.com-sz5b8             0/1     Completed   0                166m<br>rook-ceph-osd-prepare-k8s-node3.lab.example.com-645cq             0/1     Completed   0                166<br></code></pre></td></tr></table></figure><div class="note note-primary">            <p>If the rook-ceph-mon, rook-ceph-mgr, or rook-ceph-osd pods are not created, please refer to the Ceph common issues for more details and potential solutions.</p>          </div><p>再部署一个toolbox（里面有ceph命令）用于查看ceph状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl apply -f toolbox.yaml<br>kubectl exec -it rook-ceph-tools-55587cd5f9-mvnhw -n rook-ceph -- bash<br>[rook@rook-ceph-tools-55587cd5f9-mvnhw /]$ ceph status<br></code></pre></td></tr></table></figure><div class="note note-primary">            <p>If the cluster is not healthy, please refer to the Ceph common issues for more details and potential solutions.</p>          </div><p>Ceph还提供了一个dashboard：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl expose deployment rook-ceph-mgr-a -n rook-ceph --type=NodePort --name ceph-dashboard<br>kubectl get svc -n rook-ceph<br>NAME                       TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                                        AGE<br>ceph-dashboard             NodePort    10.98.127.28     &lt;none&gt;        6800:30682/TCP,9283:31582/TCP,8443:32441/TCP   21h<br><br>kubectl exec -it rook-ceph-tools-55587cd5f9-dp9z2 -n rook-ceph -- bash<br>[rook@rook-ceph-tools-55587cd5f9-dp9z2 /]$ ceph status<br>  cluster:<br>    id:     43a7f46e-58d0-4b09-9c69-d150b716d499<br>    health: HEALTH_WARN<br>            3 daemons have recently crashed<br><br>  services:<br>    mon: 3 daemons, quorum a,b,c (age 31m)<br>    mgr: a(active, since 36m), standbys: b<br>    mds: 1/1 daemons up, 1 hot standby<br>    osd: 3 osds: 3 up (since 31m), 3 in (since 20h)<br><br>  data:<br>    volumes: 1/1 healthy<br>    pools:   3 pools, 65 pgs<br>    objects: 27 objects, 429 KiB<br>    usage:   86 MiB used, 30 GiB / 30 GiB avail<br>    pgs:     65 active+clean<br><br>  io:<br>    client:   851 B/s rd, 1 op/s rd, 0 op/s wr<br></code></pre></td></tr></table></figure><p>访问https:&#x2F;&#x2F;节点IP:32441<br>至此Ceph Cluster部署完毕<br>Ceph可提供三种存储方式：</p><ul><li>Block: Create block storage to be consumed by a pod (RWO)</li><li>Shared Filesystem: Create a filesystem to be shared across multiple pods (RWX)</li><li>Object: Create an object store that is accessible inside or outside the Kubernetes cluster</li></ul><p>我们使用shared filesystem提供RWX模式</p><h1 id="创建Filesystem"><a href="#创建Filesystem" class="headerlink" title="创建Filesystem"></a>创建Filesystem</h1><p>filesystem.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">ceph.rook.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">CephFilesystem</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myfs</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">rook-ceph</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">metadataPool:</span><br>    <span class="hljs-attr">replicated:</span><br>      <span class="hljs-attr">size:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">dataPools:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">replicated</span><br>      <span class="hljs-attr">replicated:</span><br>        <span class="hljs-attr">size:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">preserveFilesystemOnDelete:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">metadataServer:</span><br>    <span class="hljs-attr">activeCount:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">activeStandby:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl apply -f filesystem.yaml<br>kubectl get pods -n rook-ceph -l app=rook-ceph-mds<br>NAME                                    READY   STATUS    RESTARTS   AGE<br>rook-ceph-mds-myfs-a-9f6f85968-ljr8f    1/1     Running   0          80m<br>rook-ceph-mds-myfs-b-595fbc5858-jm5wz   1/1     Running   0          79m<br></code></pre></td></tr></table></figure><h1 id="提供StorageClass"><a href="#提供StorageClass" class="headerlink" title="提供StorageClass"></a>提供StorageClass</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">storage.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StorageClass</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">rook-cephfs</span><br><span class="hljs-comment"># Change &quot;rook-ceph&quot; provisioner prefix to match the operator namespace if needed</span><br><span class="hljs-attr">provisioner:</span> <span class="hljs-string">rook-ceph.cephfs.csi.ceph.com</span><br><span class="hljs-attr">parameters:</span><br>  <span class="hljs-comment"># clusterID is the namespace where the rook cluster is running</span><br>  <span class="hljs-comment"># If you change this namespace, also change the namespace below where the secret namespaces are defined</span><br>  <span class="hljs-attr">clusterID:</span> <span class="hljs-string">rook-ceph</span><br><br>  <span class="hljs-comment"># CephFS filesystem name into which the volume shall be created</span><br>  <span class="hljs-attr">fsName:</span> <span class="hljs-string">myfs</span><br><br>  <span class="hljs-comment"># Ceph pool into which the volume shall be created</span><br>  <span class="hljs-comment"># Required for provisionVolume: &quot;true&quot;</span><br>  <span class="hljs-attr">pool:</span> <span class="hljs-string">myfs-replicated</span><br><br>  <span class="hljs-comment"># The secrets contain Ceph admin credentials. These are generated automatically by the operator</span><br>  <span class="hljs-comment"># in the same namespace as the cluster.</span><br>  <span class="hljs-attr">csi.storage.k8s.io/provisioner-secret-name:</span> <span class="hljs-string">rook-csi-cephfs-provisioner</span><br>  <span class="hljs-attr">csi.storage.k8s.io/provisioner-secret-namespace:</span> <span class="hljs-string">rook-ceph</span><br>  <span class="hljs-attr">csi.storage.k8s.io/controller-expand-secret-name:</span> <span class="hljs-string">rook-csi-cephfs-provisioner</span><br>  <span class="hljs-attr">csi.storage.k8s.io/controller-expand-secret-namespace:</span> <span class="hljs-string">rook-ceph</span><br>  <span class="hljs-attr">csi.storage.k8s.io/node-stage-secret-name:</span> <span class="hljs-string">rook-csi-cephfs-node</span><br>  <span class="hljs-attr">csi.storage.k8s.io/node-stage-secret-namespace:</span> <span class="hljs-string">rook-ceph</span><br><br><span class="hljs-attr">reclaimPolicy:</span> <span class="hljs-string">Delete</span><br></code></pre></td></tr></table></figure><p>provisioner名称：rook-ceph.cephfs.csi.ceph.com，其中rook-ceph是cluster运行所在namespace</p><h1 id="创建PVC"><a href="#创建PVC" class="headerlink" title="创建PVC"></a>创建PVC</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cephfs-fox-dev</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">accessModes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteMany</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">requests:</span><br>      <span class="hljs-attr">storage:</span> <span class="hljs-string">5Gi</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">rook-cephfs</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get pvc<br>NAME             STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE<br>cephfs-fox-dev   Bound    pvc-451e4fc3-bda4-445a-b2a6-d5dd40a845d3   5Gi        RWX            rook-cephfs    22h<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
      <category>kubernetes</category>
      
      <category>kubernetes storage</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cloud native</tag>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>K8S HostPath StorageClass</title>
    <link href="/2022/05/29/cncf/kubernetes/storage/hostpath/"/>
    <url>/2022/05/29/cncf/kubernetes/storage/hostpath/</url>
    
    <content type="html"><![CDATA[<h1 id="创建provisioner、storageclass"><a href="#创建provisioner、storageclass" class="headerlink" title="创建provisioner、storageclass"></a>创建provisioner、storageclass</h1><p>我们使用rancher提供的hostpath，地址：<a href="https://github.com/rancher/local-path-provisioner">https://github.com/rancher/local-path-provisioner</a><br>local-path-storage.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Namespace</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">local-path-storage</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">local-path-provisioner-service-account</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">local-path-storage</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">local-path-provisioner-role</span><br><span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [ <span class="hljs-string">&quot;&quot;</span> ]<br>    <span class="hljs-attr">resources:</span> [ <span class="hljs-string">&quot;nodes&quot;</span>, <span class="hljs-string">&quot;persistentvolumeclaims&quot;</span>, <span class="hljs-string">&quot;configmaps&quot;</span> ]<br>    <span class="hljs-attr">verbs:</span> [ <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span> ]<br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [ <span class="hljs-string">&quot;&quot;</span> ]<br>    <span class="hljs-attr">resources:</span> [ <span class="hljs-string">&quot;endpoints&quot;</span>, <span class="hljs-string">&quot;persistentvolumes&quot;</span>, <span class="hljs-string">&quot;pods&quot;</span> ]<br>    <span class="hljs-attr">verbs:</span> [ <span class="hljs-string">&quot;*&quot;</span> ]<br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [ <span class="hljs-string">&quot;&quot;</span> ]<br>    <span class="hljs-attr">resources:</span> [ <span class="hljs-string">&quot;events&quot;</span> ]<br>    <span class="hljs-attr">verbs:</span> [ <span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span> ]<br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [ <span class="hljs-string">&quot;storage.k8s.io&quot;</span> ]<br>    <span class="hljs-attr">resources:</span> [ <span class="hljs-string">&quot;storageclasses&quot;</span> ]<br>    <span class="hljs-attr">verbs:</span> [ <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span> ]<br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">local-path-provisioner-bind</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">local-path-provisioner-role</span><br><span class="hljs-attr">subjects:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">local-path-provisioner-service-account</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">local-path-storage</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">local-path-provisioner</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">local-path-storage</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">local-path-provisioner</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">local-path-provisioner</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">local-path-provisioner-service-account</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">local-path-provisioner</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">rancher/local-path-provisioner:v0.0.22</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>          <span class="hljs-attr">command:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">local-path-provisioner</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">--debug</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">start</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">--config</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/config/config.json</span><br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>              <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/config/</span><br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">POD_NAMESPACE</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">fieldRef:</span><br>                  <span class="hljs-attr">fieldPath:</span> <span class="hljs-string">metadata.namespace</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>          <span class="hljs-attr">configMap:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">local-path-config</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">storage.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StorageClass</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">local-path</span><br><span class="hljs-attr">provisioner:</span> <span class="hljs-string">rancher.io/local-path</span><br><span class="hljs-attr">volumeBindingMode:</span> <span class="hljs-string">WaitForFirstConsumer</span><br><span class="hljs-attr">reclaimPolicy:</span> <span class="hljs-string">Delete</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">local-path-config</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">local-path-storage</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">config.json:</span> <span class="hljs-string">|-</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">            &quot;nodePathMap&quot;:[</span><br><span class="hljs-string">            &#123;</span><br><span class="hljs-string">                    &quot;node&quot;:&quot;DEFAULT_PATH_FOR_NON_LISTED_NODES&quot;,</span><br><span class="hljs-string">                    &quot;paths&quot;:[&quot;/opt/local-path-provisioner&quot;]</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">            ]</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span>  <span class="hljs-attr">setup:</span> <span class="hljs-string">|-</span><br><span class="hljs-string">    #!/bin/sh</span><br><span class="hljs-string">    set -eu</span><br><span class="hljs-string">    mkdir -m 0777 -p &quot;$VOL_DIR&quot;</span><br><span class="hljs-string"></span>  <span class="hljs-attr">teardown:</span> <span class="hljs-string">|-</span><br><span class="hljs-string">    #!/bin/sh</span><br><span class="hljs-string">    set -eu</span><br><span class="hljs-string">    rm -rf &quot;$VOL_DIR&quot;</span><br><span class="hljs-string"></span>  <span class="hljs-attr">helperPod.yaml:</span> <span class="hljs-string">|-</span><br><span class="hljs-string">    apiVersion: v1</span><br><span class="hljs-string">    kind: Pod</span><br><span class="hljs-string">    metadata:</span><br><span class="hljs-string">      name: helper-pod</span><br><span class="hljs-string">    spec:</span><br><span class="hljs-string">      containers:</span><br><span class="hljs-string">      - name: helper-pod</span><br><span class="hljs-string">        image: busybox</span><br><span class="hljs-string">        imagePullPolicy: IfNotPresent</span><br></code></pre></td></tr></table></figure><p>执行该yaml，并验证是否创建成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl apply -f local-path-storage.yaml<br>kubectl get pods -n local-path-storage<br>NAME                                      READY   STATUS    RESTARTS   AGE<br>local-path-provisioner-64d5bc6b74-htqqg   1/1     Running   0          13s<br><br>kubectl get storageclasses.storage.k8s.io<br>NAME                    PROVISIONER                     RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE<br>local-path              rancher.io/local-path           Delete          WaitForFirstConsumer   false                  24s<br>rook-cephfs             rook-ceph.cephfs.csi.ceph.com   Delete          Immediate              false                  19h<br></code></pre></td></tr></table></figure><h1 id="创建pvc"><a href="#创建pvc" class="headerlink" title="创建pvc"></a>创建pvc</h1><p>pvc.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">local-path-pvc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">local-path</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">requests:</span><br>      <span class="hljs-attr">storage:</span> <span class="hljs-string">128Mi</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get pvc<br>NAME             STATUS    VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE<br>local-path-pvc   Pending    <br></code></pre></td></tr></table></figure><p>此处Pending是因为设置的BINDINGMODE是WaitForFirstConsumer，是正常现象</p><p>现在来发布一个pod验证一下是否能成功bind</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">volume-test</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">volume-test</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:stable-alpine</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">volv</span><br>      <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/data</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">volv</span><br>    <span class="hljs-attr">persistentVolumeClaim:</span><br>      <span class="hljs-attr">claimName:</span> <span class="hljs-string">local-path-pvc</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl apply -f pod.yaml<br>kubectl get pods<br>NAME          READY   STATUS    RESTARTS   AGE<br>volume-test   1/1     Running   0          51s<br><br>kubectl get pvc<br>NAME             STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE<br>local-path-pvc   Bound    pvc-73c6f5b4-c22d-4654-bc1c-967aacd5d2f8   128Mi      RWO            local-path     15m<br></code></pre></td></tr></table></figure><p>pvc已经是Bound了</p>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
      <category>kubernetes</category>
      
      <category>kubernetes storage</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cloud native</tag>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>K8S NFS StorageClass</title>
    <link href="/2022/05/29/cncf/kubernetes/storage/nfs/"/>
    <url>/2022/05/29/cncf/kubernetes/storage/nfs/</url>
    
    <content type="html"><![CDATA[<p>NFS是最常规、最简单的提供云存储的方式</p><h1 id="安装NFS"><a href="#安装NFS" class="headerlink" title="安装NFS"></a>安装NFS</h1><p>在提供nfsserver的节点（192.168.126.99）安装相关软件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install nfs-kernel-server rpcbind<br></code></pre></td></tr></table></figure><p>在需要远程挂载nfs的客户端节点（也就是所有的k8s node节点）安装相关软件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt install -y nfs-common rpcbind<br></code></pre></td></tr></table></figure><p>nfsserver节点导出共享目录，重启nfsserver</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /etc/exports<br>/nfs *(insecure,rw,sync,no_root_squash)<br><br>systemctl enable rpcbind<br>systemctl enable nfs-server<br>systemctl start rpcbind<br>systemctl start nfs-server<br></code></pre></td></tr></table></figure><p>使nfs配置生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">exportfs -rv<br></code></pre></td></tr></table></figure><p>客户端节点验证能否挂载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">showmount -e 192.168.126.99<br>mount -t nfs 192.168.126.99:/nfs /mnt/<br></code></pre></td></tr></table></figure><h1 id="创建provisioner、storageclass"><a href="#创建provisioner、storageclass" class="headerlink" title="创建provisioner、storageclass"></a>创建provisioner、storageclass</h1><p>nfs-storageclass.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">storage.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StorageClass</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-storage</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">storageclass.kubernetes.io/is-default-class:</span> <span class="hljs-string">&quot;true&quot;</span><br><span class="hljs-attr">provisioner:</span> <span class="hljs-string">k8s-sigs.io/nfs-provisioner</span>  <span class="hljs-comment"># 这个名字随便起，和下面ENV里的PROVISIONER_NAME对上就行了</span><br><span class="hljs-attr">parameters:</span><br>  <span class="hljs-attr">archiveOnDelete:</span> <span class="hljs-string">&quot;false&quot;</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nfs-client-provisioner</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">nfs-provisioner</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">Recreate</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nfs-client-provisioner</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nfs-client-provisioner</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">nfs-client-provisioner</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/nfs-subdir-external-provisioner:v4.0.2</span><br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-root</span><br>              <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/persistentvolumes</span><br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">PROVISIONER_NAME</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">k8s-sigs.io/nfs-provisioner</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NFS_SERVER</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.126</span><span class="hljs-number">.99</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NFS_PATH</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">/nfs</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-root</span><br>          <span class="hljs-attr">nfs:</span><br>            <span class="hljs-attr">server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.126</span><span class="hljs-number">.99</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/nfs</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">nfs-provisioner</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner-runner</span><br><span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>    <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;nodes&quot;</span>]<br>    <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>    <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;persistentvolumes&quot;</span>]<br>    <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>]<br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>    <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;persistentvolumeclaims&quot;</span>]<br>    <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>]<br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;storage.k8s.io&quot;</span>]<br>    <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;storageclasses&quot;</span>]<br>    <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>    <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;events&quot;</span>]<br>    <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span>]<br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">run-nfs-client-provisioner</span><br><span class="hljs-attr">subjects:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">nfs-provisioner</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner-runner</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">leader-locking-nfs-client-provisioner</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">nfs-provisioner</span><br><span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>    <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;endpoints&quot;</span>]<br>    <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span>]<br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">RoleBinding</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">leader-locking-nfs-client-provisioner</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">nfs-provisioner</span><br><span class="hljs-attr">subjects:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-client-provisioner</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">nfs-provisioner</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">leader-locking-nfs-client-provisioner</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><p>创建上述资源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl apply -f nfs-storageclass.yaml<br></code></pre></td></tr></table></figure><p>检查是否创建成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get pods -n nfs-provisioner<br>kubectl get storageclass<br>NAME                    PROVISIONER                     RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE<br>nfs-storage (default)   k8s-sigs.io/nfs-provisioner     Delete          Immediate              false                  55m<br></code></pre></td></tr></table></figure><h1 id="创建PVC"><a href="#创建PVC" class="headerlink" title="创建PVC"></a>创建PVC</h1><p>创建一个pvc测试一下，storageclass选择刚建好的nfs-storage<br>pvc.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nfs-fox</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nfs-fox</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteMany</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">requests:</span><br>      <span class="hljs-attr">storage:</span> <span class="hljs-string">1Gi</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">nfs-storage</span><br></code></pre></td></tr></table></figure><p>验证是否成功，Bound就成功了，要是Pending就失败了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get pvc<br>NAME             STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE<br>nfs-fox          Bound    pvc-f84fa5d7-050f-4549-95e9-4a2715d23043   1Gi        RWX            nfs-storage    54m<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
      <category>kubernetes</category>
      
      <category>kubernetes storage</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cloud native</tag>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>K8S系列文章之二：用kubeadm管理集群</title>
    <link href="/2022/04/17/cncf/kubernetes/kubeadm/"/>
    <url>/2022/04/17/cncf/kubernetes/kubeadm/</url>
    
    <content type="html"><![CDATA[<h1 id="kubeadm功能"><a href="#kubeadm功能" class="headerlink" title="kubeadm功能"></a>kubeadm功能</h1><p><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fk8s%2Fkubeadm%2F1.png"></p><ul><li>按照参数或配置文件初始化控制平面<ul><li>按照指定版本自动pull控制平面组件镜像</li><li>调用本地容器运行时以静态pod形式运行核心组件</li><li>在&#x2F;etc&#x2F;kubernetes&#x2F;pki自动创建根证书，并使用根证书为组件签发证书</li><li>创建管理员登陆凭证：&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf</li></ul></li><li>使用discovery token和TLS bootstrap token管理worker节点<ul><li>安全地增加集群worker节点</li><li>安全恢复节点</li></ul></li><li>平滑升级和降级集群</li><li>续签证书</li><li>构建高可用集群，多master节点、多etcd节点</li><li>不依赖平台，可在本地或公有云上部署集群</li></ul><h1 id="kubeadm子命令"><a href="#kubeadm子命令" class="headerlink" title="kubeadm子命令"></a>kubeadm子命令</h1><table><tr><th>子命令</th><th>说明</th></tr><tr>  <td>kubeadm completion</td>  <td>kubeadm为指定的shell（bash或zsh）中的子命令或参数实现自动补齐  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source &lt;(kubeadm completion bash)<br></code></pre></td></tr></table></figure>  </td></tr><tr>  <td>kubeadm certs</td>  <td>用于使用kubeadm处理集群证书  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubeadm certs check-expiration # 检查默认存放在/etc/kubernetes/pki中CA和证书文件的过期日期和剩余时间<br>kubeadm certs renew &lt;all|certname&gt; # 更新指定或所有证书<br></code></pre></td></tr></table></figure>  </td></tr><tr>  <td>kubeadm config</td>  <td>管理kubeadm集群的配置，该配置保留在集群的kube-system命名空间中名为kubeadm-config的ConfigMap，kubeadm使用它来存储关于集群的内部配置。使用kubectl -n kube-system get cm kubeadm-config -o yaml打印当前的集群配置  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubeadm config images list<br>kubeadm config images pull<br>kubeadm config print init-defauts # 生成kubeadm init默认配置<br>kubeadm config print join-defaults # 生成kubeadm join默认配置<br></code></pre></td></tr></table></figure>  </td></tr><tr>  <td>kubeadm init</td>  <td>运行此命令以设置kubernetes控制平面</td></tr><tr>  <td>kubeadm join</td>  <td>在任何想要加入现有集群的节点上运行此命令</td></tr><tr>  <td>kubeadm reset</td>  <td>还原集群到初始化状态</td></tr><tr>  <td>kubeadm token</td>  <td>使用generate、create、list、delete子命令管理令牌</td></tr><tr>  <td>kubeadm upgrade</td>  <td>使用此命令平稳的将集群升级到指定版本</td></tr><tr>  <td>kubeadm version</td>  <td>打印版本</td></tr><tr>  <td>kubeadm help</td>  <td>打印帮助信息</td></tr></table><h2 id="kubeadm-init-参数说明"><a href="#kubeadm-init-参数说明" class="headerlink" title="kubeadm init 参数说明"></a>kubeadm init 参数说明</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>–apiserver-advertise-address</td><td>声明API服务器正在监听的IP地址，如果未设置，将使用默认网络接口</td></tr><tr><td>–apiserver-bind-port</td><td>API服务器要绑定的端口，默认是6443</td></tr><tr><td>–apiserver-cert-extra-sans</td><td>可以是IP地址和DNS</td></tr><tr><td>–cert-dir</td><td>证书存放路径，默认在&#x2F;etc&#x2F;kubernetes&#x2F;pki</td></tr><tr><td>–config</td><td>kubeadm配置文件存放路径</td></tr><tr><td>–cri-socket</td><td>要连接的CRI套接字的路径，如果为空，则kubeadm将尝试自动检测此值；仅当安装了多个CRI或具有非标准CRI插槽时，才使用此选项</td></tr><tr><td>–dtry-run</td><td>试运行，不做任何更改</td></tr><tr><td>–ignore-preflight-errors</td><td>检查清单，其错误显示为警告</td></tr><tr><td>–image-repository</td><td>镜像仓库，默认为k8s.gcr.io（国内不通）</td></tr><tr><td>–kubernetes-version</td><td>k8s版本</td></tr><tr><td>–node-name</td><td>指定node节点名称</td></tr><tr><td>–pod-network-cidr</td><td>指定pod网络的CIDR范围</td></tr><tr><td>–service-cidr</td><td>指定service的CIDR范围，默认为10.96.0.0&#x2F;12</td></tr><tr><td>–service-dns-domain</td><td>为服务指定domain name。默认为cluster.local</td></tr><tr><td>–token</td><td>手动指定用于在节点和控制平面节点之间建立双向信任的令牌</td></tr><tr><td>–skip-token-print</td><td>不打印”kubeadm init”生成的默认令牌</td></tr><tr><td>–token-ttl</td><td>令牌的生命周期，如果设置为0，则永不过期（默认为24h）</td></tr></tbody></table><h2 id="kubeadm-join-参数说明"><a href="#kubeadm-join-参数说明" class="headerlink" title="kubeadm join 参数说明"></a>kubeadm join 参数说明</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubeadm join 192.168.126.100:6443 --token rxqhqd.uzn6bhwxhnrikddx --discovery-token-ca-cert-hash sha256:211774e9b0c1d5aabe9fee10b63fe5f875ce6a588d216dc7793fac2298c9e745      <br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>–tls-bootstrap-token</td><td>指定用于在加入节点时临时通过kubernetes控制平面进行身份验证的令牌</td></tr><tr><td>–discovery-file</td><td>基于文件发现用于加载集群信息的文件或URL</td></tr><tr><td>–discovery-token</td><td>基于令牌发现，令牌用于验证从API服务器获取的集群信息</td></tr><tr><td>–token</td><td>默认令牌，如果未指定</td></tr><tr><td>–discovery-token-ca-cert-hash</td><td>对于基于令牌的发现，请验证根CA公共密钥是否与此哈希匹配（格式：&lt;类型&gt;:&lt;值&gt;</td></tr><tr><td>–discovery-token-unsafe-skip-ca-verification</td><td>对于基于令牌的发现，允许加入时不使用–discovery-token-ca-cert-hash参数</td></tr></tbody></table><h2 id="kubeadm-upgrade子命令说明"><a href="#kubeadm-upgrade子命令说明" class="headerlink" title="kubeadm upgrade子命令说明"></a>kubeadm upgrade子命令说明</h2><table><tr><th>参数</th><th>说明</th></tr><tr>  <td>Upgrade apply</td>  <td>将您的kubernetes集群升级到指定版本  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubeadm upgrade apply v1.23.5<br></code></pre></td></tr></table></figure>  </td></tr><tr>  <td>Upgrade diff</td>  <td>显示指定版本与现存版本配置文件的差异  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubeadm upgrade diff v1.23.5<br></code></pre></td></tr></table></figure>  </td></tr><tr>  <td>Upgrade node</td>  <td>升级集群中的单个节点或某个节点制定阶段性升级，支持的阶段：<br>  control-plane、kubelet-config、preflight  </td></tr><tr>  <td>Upgrade plan</td>  <td>检查和当前kubeadm相同版本，可升级的k8s最新子版本  </td></tr></table><h2 id="kubeadm-token子命令说明"><a href="#kubeadm-token子命令说明" class="headerlink" title="kubeadm token子命令说明"></a>kubeadm token子命令说明</h2><p>引导令牌用于在客户端和服务端之间建立双向信任。当客户端（例如即将加入集群的节点）需要信任与之通信的服务器时，可以使用引导令牌。然后可以使用带有“签名”用法的引导令牌。引导令牌还可以用作允许对API服务器进行短暂身份验证的方式（令牌用作API服务器信任客户端的方式），例如用于执行TLS引导程序。</p><table><thead><tr><th>子命令</th><th>说明</th></tr></thead><tbody><tr><td>token generate</td><td>随机生成并打印引导令牌（bootstrap tokens），但不要存入etcd</td></tr><tr><td>token create</td><td>创建引导令牌（bootstrap tokens）并存入etcd</td></tr><tr><td>token list</td><td>列出etcd中处于有效期内的所有token</td></tr><tr><td>token delete</td><td>从etcd中删除指定令牌</td></tr></tbody></table><p>token create 参数说明</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>–print-join-command</td><td>打印使用该令牌加入集群所需的完整kubeadm join命令</td></tr><tr><td>–ttl duration</td><td>令牌被自动删除之前的持续时间（例如1s、2m、3h）。如果设置为0，–ttl&#x3D;0令牌将永不过期</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
      <category>kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cloud native</tag>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>K8S系列文章之一：Kubernetes概览</title>
    <link href="/2022/04/17/cncf/kubernetes/k8s_summary/"/>
    <url>/2022/04/17/cncf/kubernetes/k8s_summary/</url>
    
    <content type="html"><![CDATA[<h1 id="VM和容器的区别"><a href="#VM和容器的区别" class="headerlink" title="VM和容器的区别"></a>VM和容器的区别</h1><p><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fk8s%2Fsummary%2F1.png"></p><h1 id="什么是云原生"><a href="#什么是云原生" class="headerlink" title="什么是云原生"></a>什么是云原生</h1><p>CNCF——云原生计算基金会<br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fk8s%2Fsummary%2F2.png"><br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fk8s%2Fsummary%2F3.png"></p><h1 id="什么是Kubernetes"><a href="#什么是Kubernetes" class="headerlink" title="什么是Kubernetes"></a>什么是Kubernetes</h1><p>Kubernetes是一个可移植的、可扩展的容器编排工具与平台，用于管理容器化的工作负载和服务，可促进声明式配置和自动化。Kubernetes拥有一个庞大且快速增长的生态系统。Kubernetes的服务、支持和工具广泛可用。</p><p>Kubernetes这个名字源于希腊语，意为“舵手”或“飞行员”。k8s这个缩写是因为k和s之间有8个字母。Google在2014年开源了Kubernetes项目。Kubernetes建立在Google大规模运行生产工作负载方面拥有十几年的经验基础上，结合了社区中最好的想法和实践。</p><p>Kubernetes是用于自动部署，扩展和管理容器化应用程序的开源系统。</p><h1 id="Kubernetes架构"><a href="#Kubernetes架构" class="headerlink" title="Kubernetes架构"></a>Kubernetes架构</h1><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fk8s%2Fk8s_arch.png"></p><h2 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h2><p>control-plane 节点核心组件：<a href="https://kubernetes.io/docs/concepts/overview/components/">https://kubernetes.io/docs/concepts/overview/components/</a></p><table><thead><tr><th>组件</th><th>说明</th></tr></thead><tbody><tr><td>kube-apiserver</td><td>提供Restful API接口、集群的统一入口，集群的认证、授权、准入控制及各组件的协调者，所有的对象资源的增删改查和监听操作都交给apiserver处理后再提交给etcd数据库做持久化存储</td></tr><tr><td>kube-controller-manager</td><td>管理k8s出厂的时候预置的各种类(kind)(如deployment、service等)，然后从类中实例化出资源对象并对其进行管理。Controller manager由多种controller组成，包括Node Controller、Job Controller、Endpoints Controller、Service Account &amp; Token Controller</td></tr><tr><td>kube-sheduler</td><td>将pod调度到可用的Node节点上</td></tr><tr><td>etcd</td><td>高可用的分布式键值数据库，可用于服务发现。etcd采用raft一致性算法，基于Go语言实现。etcd作为一个高可用键值存储系统，天生就是为集群化而设计，用于保存K8s集群状态数据</td></tr></tbody></table><h2 id="Kubernetes工作流程"><a href="#Kubernetes工作流程" class="headerlink" title="Kubernetes工作流程"></a>Kubernetes工作流程</h2><p><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fk8s%2Fsummary%2F4.png"><br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fk8s%2Fsummary%2F5.png"><br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fk8s%2Fsummary%2F6.png"><br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fk8s%2Fsummary%2F7.png"><br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fk8s%2Fsummary%2F8.png"><br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fk8s%2Fsummary%2F9.png"><br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fk8s%2Fsummary%2F10.png"></p><h2 id="Container-Runtime-Interface-CRI-架构"><a href="#Container-Runtime-Interface-CRI-架构" class="headerlink" title="Container Runtime Interface(CRI)架构"></a>Container Runtime Interface(CRI)架构</h2><p>容器运行时分为High-level和Low-level</p><ul><li>High-level：管理，协调，接收外部请求，提供存储、网络</li><li>Low-level：，遵循OCI(Open Container Initiative)开放容器标准，创建cgroups和namespaces进行资源隔离</li></ul><p><strong>dockershim</strong></p><p>kubelet用于连接容器运行时，容器运行时除了docker外，当时还有一个rkt。</p><p>Google和Docker互相看不顺眼，K8s提出了CRI接口，docker不遵循CRI接口，K8s为了兼容docker，在kubelet上放了一个docker垫片(dockershim)，通过dockershim去连接docker。</p><p>1.24版本以后谷歌去掉了dockershim，docker认怂了，说后面垫片docker来开发，docker把自己代码解耦，其中containerd作为高级容器运行时并交给了CNCF（已毕业）；如果去掉docker，containerd现在仍然是docker公司的。runc是低级容器运行时，也是docker公司的。<br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fk8s%2Fsummary%2F11.png"></p><h2 id="K8s部署工具及托管平台"><a href="#K8s部署工具及托管平台" class="headerlink" title="K8s部署工具及托管平台"></a>K8s部署工具及托管平台</h2><p><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fk8s%2Fsummary%2F12.png"></p><h2 id="K8s高可用架构"><a href="#K8s高可用架构" class="headerlink" title="K8s高可用架构"></a>K8s高可用架构</h2><ul><li><p>etcd和master部署在一起<br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fk8s%2Fsummary%2F13.png"></p></li><li><p>etcd单独部署<br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fk8s%2Fsummary%2F14.png"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
      <category>kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cloud native</tag>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Istio系列文章之（三）功能快速入门</title>
    <link href="/2022/03/08/cncf/microservice/istio3/"/>
    <url>/2022/03/08/cncf/microservice/istio3/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p>本文用一个小例子演示如何将一个微服务接入istio，以及使用istio进行流量管理</p>          </div><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>本文使用环境为 kubernetes v1.21.5 + istio 1.12.1</p><h1 id="部署两个版本的微服务"><a href="#部署两个版本的微服务" class="headerlink" title="部署两个版本的微服务"></a>部署两个版本的微服务</h1><p>本文将在k8s中部署一个Python Flask编写的简易微服务，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> Request, urlopen<br><span class="hljs-keyword">import</span> json<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">i_am_fine</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;I am FINE!&quot;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/env/&lt;env&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_env</span>(<span class="hljs-params">env</span>):<br>    <span class="hljs-keyword">return</span> os.environ.get(env)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/fetch&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_url</span>():<br>    url = request.args.get(<span class="hljs-string">&#x27;url&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">with</span> urlopen(url) <span class="hljs-keyword">as</span> response:<br>        <span class="hljs-keyword">return</span> response.read()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">80</span>, debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>代码中的env会在创建Deployment的时候作为环境变量提交上去。</p><p>现在为该服务创建k8s资源：flaskapp.istio.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">flaskapp</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">flaskapp</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">flaskapp</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">flaskapp-v1</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">flaskapp</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">flaskapp</span><br>        <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">flaskapp</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">dustise/flaskapp</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">version</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">v1</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">flaskapp-v2</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">flaskapp</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v2</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">flaskapp</span><br>        <span class="hljs-attr">version:</span> <span class="hljs-string">v2</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">flaskapp</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">dustise/flaskapp</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">version</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">v2</span><br></code></pre></td></tr></table></figure><p>说明：</p><ul><li>两个版本的Deployment用的是相同的镜像，但使用不同的version标签进行区分，分别是v1和v2</li><li>两个版本的Deployment都设置了一个环境变量version，分别取值v1和v2</li><li>两个版本的Deployment都使用了app和version标签，在istio网格应用中通常会使用这两个标签作为应用和版本的标识</li><li>Service中的selector仅使用了一个app标签，意味着该Service对两个Deployment都会进行转发</li><li>Service中定义的端口一般按istio规范命名为http</li></ul><p>现在需要将该服务提交到k8s的时候对其进行istio注入，有注入两种方法：</p><p>自动注入</p><p>需要为服务所在的命名空间打上标签<code>istio-injection=enabled</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl label namespace default istio-injection=enabled<br></code></pre></td></tr></table></figure><p>手动注入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">istioctl kube-inject -f flaskapp.istio.yaml | kubectl apply -f -<br></code></pre></td></tr></table></figure><p>过一会查看Pod状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get pods -n default<br>NAME                           READY   STATUS    RESTARTS   AGE<br>flaskapp-v1-6d5d7ffb9f-5q6v8   2/2     Running   0          20h<br>flaskapp-v2-8647744b6-dlnrb    2/2     Running   0          20h<br></code></pre></td></tr></table></figure><p>每个Pod里有两个容器，这就是istio注入Sidecar的结果，除了一个初始化容器istio-init外，还有两个容器：一个是istio-proxy，另一个是原本的服务</p><h1 id="部署客户端微服务"><a href="#部署客户端微服务" class="headerlink" title="部署客户端微服务"></a>部署客户端微服务</h1><p>客户端服务很简单，只是使用了一个已装好各种测试工具的镜像，具体的测试都可以在这个容器内shell完成。准备好资源文件：sleep.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">sleep</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">sleep</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">sleep</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ssh</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">sleep</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">sleep</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">sleep</span><br>        <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">sleep</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">dustise/sleep</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br></code></pre></td></tr></table></figure><p>注意这个客户端应用并没有对外提供服务的能力，但还是需要给他创建一个Service对象，这同样是istio的注入要求：没有Service的Deployment是无法被istio发现并进行操作的。</p><p>同样的对该文件进行注入并提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">istioctl kube-inject -f sleep.yaml | kubectl apply -f -<br></code></pre></td></tr></table></figure><p>过一会查看Pod状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get pods -l app=sleep -n default<br>NAME                     READY   STATUS    RESTARTS   AGE<br>sleep-6bf6676dcc-6nvnm   2/2     Running   0          21h<br></code></pre></td></tr></table></figure><h1 id="验证服务"><a href="#验证服务" class="headerlink" title="验证服务"></a>验证服务</h1><p>下来进入sleep容器（如果有kubernetes-dashboard也可以通过界面进入）并进行测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl exec -it sleep-6bf6676dcc-6nvnm /bin/bash<br>kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.<br>bash-5.0# for((i=0; i&lt;100; i++)); do http --body http://flaskapp/env/version; done<br>v2<br>v1<br>v2<br>……<br></code></pre></td></tr></table></figure><p>从运行结果可以看到v1和v2两个结果随机出现，大约各占一半</p><h1 id="创建目标规则和默认路由"><a href="#创建目标规则和默认路由" class="headerlink" title="创建目标规则和默认路由"></a>创建目标规则和默认路由</h1><p>接下来使用istio来管理这两个服务的流量</p><p>首先创建flaskapp应用的目标规则：flaskapp-destinationrule.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">DestinationRule</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">flaskapp</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">flaskapp</span><br>  <span class="hljs-attr">subsets:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">v1</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">v2</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v2</span><br></code></pre></td></tr></table></figure><p>该DestinationRule通过Pod标签把flaskapp服务分成两个subset，分别命名为v1和v2</p><p>提交该文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl apply -f flaskapp-destinationrule.yaml<br></code></pre></td></tr></table></figure><p>接下来为flaskapp服务创建路由规则：flaskapp-virtualservice-v2.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">flaskapp-default-v2</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">flaskapp</span><br>  <span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">flaskapp</span><br>        <span class="hljs-attr">subset:</span> <span class="hljs-string">v2</span><br></code></pre></td></tr></table></figure><p>该VirtualService对象负责接管对flaskapp这一主机名的访问，并将所有流量都转发到DestinationRule定义的v2 subset上。</p><p>提交该文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl apply -f flaskapp-virtualservice-v2.yaml<br></code></pre></td></tr></table></figure><p>现在进入sleep测试，看看重新定义的流量管理规则是否生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">kubectl <span class="hljs-built_in">exec</span> -it sleep-6bf6676dcc-6nvnm /bin/bash</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kubectl <span class="hljs-built_in">exec</span> [POD] [COMMAND] is DEPRECATED and will be removed <span class="hljs-keyword">in</span> a future version. Use kubectl <span class="hljs-built_in">exec</span> [POD] -- [COMMAND] instead.</span><br>bash-5.0# for((i=0; i&lt;100; i++)); do http --body http://flaskapp/env/version; done<br>v2<br>v2<br>v2<br>……<br></code></pre></td></tr></table></figure><p>可以看到路由规则已经生效，重复多次访问返回的永远是v2</p><h1 id="Istio-Dashboard"><a href="#Istio-Dashboard" class="headerlink" title="Istio Dashboard"></a>Istio Dashboard</h1><p>作为一个云原生的服务网格组件，istio必须提供可观测的相关功能。通过istioctl命令可以看到istio默认提供了以下几种dashboard：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">istioctl dashboard</span><br>Access to Istio web UIs<br><br>Usage:<br>  istioctl dashboard [flags]<br>  istioctl dashboard [command]<br><br>Aliases:<br>  dashboard, dash, d<br><br>Available Commands:<br>  controlz    Open ControlZ web UI<br>  envoy       Open Envoy admin web UI<br>  grafana     Open Grafana web UI<br>  jaeger      Open Jaeger web UI<br>  kiali       Open Kiali web UI<br>  prometheus  Open Prometheus web UI<br>  skywalking  Open SkyWalking UI<br>  zipkin      Open Zipkin web UI<br></code></pre></td></tr></table></figure><p>注意新版的istio已经不再默认安装各类dashboard，必须自己手动部署</p><h2 id="部署Prometheus"><a href="#部署Prometheus" class="headerlink" title="部署Prometheus"></a>部署Prometheus</h2><p>手动提交yaml到kubernetes</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> /opt/istio-1.12.1/samples/addons</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kubectl apply -f prometheus.yaml</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kubectl get pods -l app=prometheus -n istio-system</span><br>NAME                          READY   STATUS    RESTARTS   AGE<br>prometheus-64fd8ccd65-6n6qt   2/2     Running   0          17h<br></code></pre></td></tr></table></figure><p>启动prometheus dashboard监听</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">istioctl dashboard prometheus --address=192.168.91.10</span><br>http://192.168.91.10:9090<br></code></pre></td></tr></table></figure><p><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fmicroservice%2Fistio%2F2.png"></p><h2 id="部署Grafana"><a href="#部署Grafana" class="headerlink" title="部署Grafana"></a>部署Grafana</h2><p>手动提交yaml到kubernetes</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> /opt/istio-1.12.1/samples/addons</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kubectl apply -f grafana.yaml</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kubectl get pods -l app=grafana -n istio-system</span><br>NAME                       READY   STATUS    RESTARTS   AGE<br>grafana-6ccd56f4b6-vz7k5   1/1     Running   0          16h<br></code></pre></td></tr></table></figure><p>启动grafana dashboard监听</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">istioctl dashboard grafana --address=192.168.91.10</span><br>http://192.168.91.10:3000<br></code></pre></td></tr></table></figure><p><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fmicroservice%2Fistio%2F3.png"></p><h2 id="部署Jaeger"><a href="#部署Jaeger" class="headerlink" title="部署Jaeger"></a>部署Jaeger</h2><p>手动提交yaml到kubernetes</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> /opt/istio-1.12.1/samples/addons</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kubectl apply -f jaeger.yaml</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kubectl get pods -l app=jaeger -n istio-system</span><br>NAME                      READY   STATUS    RESTARTS   AGE<br>jaeger-5d44bc5c5d-fqtbr   1/1     Running   0          16h<br></code></pre></td></tr></table></figure><p>启动jaeger dashboard监听</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">istioctl dashboard jaeger --address=192.168.91.10</span><br>http://192.168.91.10:16686<br></code></pre></td></tr></table></figure><p><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fmicroservice%2Fistio%2F4.png"></p><h2 id="部署Kiali"><a href="#部署Kiali" class="headerlink" title="部署Kiali"></a>部署Kiali</h2><p>手动提交yaml到kubernetes</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> /opt/istio-1.12.1/samples/addons</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kubectl apply -f kiali.yaml</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kubectl get pods -l app=kiali -n istio-system</span><br>NAME                     READY   STATUS    RESTARTS   AGE<br>kiali-79b86ff5bc-skwp8   1/1     Running   0          16h<br></code></pre></td></tr></table></figure><p>启动kiali dashboard监听</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">istioctl dashboard kiali --address=192.168.91.10</span><br>http://192.168.91.10:20001/kiali<br></code></pre></td></tr></table></figure><p><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fmicroservice%2Fistio%2Fkiali.png"></p>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cloud native</tag>
      
      <tag>servicemesh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Istio系列文章之（二）安装部署</title>
    <link href="/2022/03/07/cncf/microservice/istio2/"/>
    <url>/2022/03/07/cncf/microservice/istio2/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p>目前istio已经弃用了Helm方式安装，改为使用istioctl进行安装</p>          </div><h1 id="准备k8s集群"><a href="#准备k8s集群" class="headerlink" title="准备k8s集群"></a>准备k8s集群</h1><p>本文使用kubesphere提供的kubekey工具部署了一个简易的k8s集群（1master+2node），具体步骤详见官方说明：</p><p><a href="https://kubesphere.io/zh/docs/installing-on-linux/introduction/multioverview/">https://kubesphere.io/zh/docs/installing-on-linux/introduction/multioverview/</a></p><p>本文部署的k8s版本是v1.21.5</p><h1 id="下载istio介质"><a href="#下载istio介质" class="headerlink" title="下载istio介质"></a>下载istio介质</h1><p>前往github官网下载：<a href="https://github.com/istio/istio/releases">https://github.com/istio/istio/releases</a></p><p>本文使用的版本是 Istio 1.12.1</p><h1 id="安装istio"><a href="#安装istio" class="headerlink" title="安装istio"></a>安装istio</h1><ol><li><p>解压安装包到&#x2F;opt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar zxvf istio-1.12.1-linux-amd64.tar.gz -C /opt/<br></code></pre></td></tr></table></figure></li><li><p>创建istioctl软链</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -s /opt/istio-1.12.1/bin/istioctl /usr/bin<br></code></pre></td></tr></table></figure></li><li><p>安装istio</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">istioctl install --set profile=demo -y<br>✔ Istio core installed                                                                                                 <br>✔ Istiod installed                                                                                                     <br>✔ Egress gateways installed                                                                                            <br>✔ Ingress gateways installed                                                                                           <br>✔ Installation complete                                                                                                Thank you for installing Istio 1.12.1.  Please take a few minutes to tell us about your install/upgrade experience!  https://forms.gle/KjkrDnMPByq7akrYA<br></code></pre></td></tr></table></figure></li></ol><p>关于不同profile的说明如下：<br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fmicroservice%2Fistio%2F1.png"></p><p>有时候安装istio会失败，主要报错为istio-egressgateway或者istio-ingressgateway的istio-proxy容器起不来，看日志报错为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">istio-proxy warn sds failed to warm certificate: failed to generate workload<br>……<br>Readiness probe failed: Get &quot;http://10.233.113.10:15021/healthz/ready&quot;: dial tcp 10.233.113.10:15021: connect: connection refused<br>……<br>lookup istiod.istio-system.svc on 10.96.0.10:53: read udp 10.244.153.113:41187-&gt;10.96.0.10:53: i/o timeout&quot;<br></code></pre></td></tr></table></figure><p>猜测为宿主机的dns没配好，解决办法：</p><ul><li>k8s所有节点&#x2F;etc&#x2F;resolve.conf里配置正确的dns</li><li>铲掉k8s集群，重新部署k8s，再装istio</li></ul><p>注意，如果安装istio这里有问题，后面就没法正常使用istio的各项功能，所以这里必须安装成功。</p><ol start="4"><li><p>装好以后验证istio的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">istioctl version<br>client version: 1.12.1<br>control plane version: 1.12.1<br>data plane version: 1.12.1 (7 proxies)<br></code></pre></td></tr></table></figure></li><li><p>验证istio各个pod状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get pods -n istio-system<br>NAME                                    READY   STATUS    RESTARTS   AGE<br>istio-egressgateway-687f4db598-b5llq    1/1     Running   0          12h<br>istio-ingressgateway-78f69bd5db-bxnvr   1/1     Running   0          12h<br>istiod-76d66d9876-w4wpv                 1/1     Running   0          12h<br></code></pre></td></tr></table></figure></li></ol><p>到此istio就安装成功了</p>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cloud native</tag>
      
      <tag>servicemesh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Istio系列文章之（一）基本原理介绍</title>
    <link href="/2022/03/06/cncf/microservice/istio1/"/>
    <url>/2022/03/06/cncf/microservice/istio1/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p>Istio: An open platform to connect, secure, control and observe services.</p>          </div><h1 id="什么是-service-mesh"><a href="#什么是-service-mesh" class="headerlink" title="什么是 service mesh"></a>什么是 service mesh</h1><p>在业务规模化和研发效能提升等因素的驱动下，从单块应用向微服务架构的转型已经成为很多企业(尤其是互联网企业)数字化转型的趋势。</p><p>在微服务模式下，企业内部服务少则几个到几十个，多则上百个，每个服务一般都以集群方式部署，这时自然产生两个问题(如下图所示)：</p><p>一、服务发现：服务的消费方(Consumer)如何发现服务的提供方(Provider)？</p><p>二、负载均衡：服务的消费方如何以某种负载均衡策略访问集群中的服务提供方实例？</p><p>服务发现和负载均衡并不是新问题，业界其实已经探索和总结出一些常用的模式，这些模式的核心其实是代理(Proxy)，以及代理在架构中所处的位置。在服务消费方和服务提供方之间增加一层代理，由代理负责服务发现和负载均衡功能，消费方通过代理间接访问目标服务。</p><p>所谓的ServiceMesh，也被形象称为边车(Sidecar)模式。早期有一些摩托车，除了主驾驶位，还带一个边车位，可以额外坐一个人。在Sidecar模式中，业务代码进程(相当于主驾驶)共享一个代理(相当于边车)，代理除了负责服务发现和负载均衡，还负责动态路由、容错限流、监控度量和安全日志等功能，这些功能是具体业务无关的，属于跨横切面关注点(Cross-Cutting Concerns)范畴。</p><p>在新一代的ServiceMesh架构中(下图上方)，服务的消费方和提供方主机(或者容器)两边都会部署代理SideCar。ServiceMesh比较正式的术语也叫数据面板(DataPlane)，与数据面板对应的还有一个独立部署的控制面板(ControlPlane)，用来集中配置和管理数据面板，也可以对接各种服务发现机制(如K8S服务发现)。<br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fmicroservice%2Fistio%2Fservicemesh.png"></p><h1 id="istio介绍"><a href="#istio介绍" class="headerlink" title="istio介绍"></a>istio介绍</h1><p>首先来看 istio 官方给出的架构图<br><img src="https://blog-1255547500.cos.ap-beijing.myqcloud.com/images%2Fcncf%2Fmicroservice%2Fistio%2Fistio_arch.png"></p><p>可以看到，istio 就是我们上述提到的 service mesh 架构的一种实现，服务之间的通信（比如这里的 Service A 访问 Service B）会通过代理（默认是 envoy）来进行，而且中间的网络协议支持 HTTP&#x2F;1.1，HTTP&#x2F;2，gRPC 或者 TCP，可以说覆盖了主流的通信协议。</p><p>istio核心组件整体分为数据面(data plane)和控制面(control plane)，其中控制面做了进一步的细分，分成了 Pilot、Mixer、和 Citadel，它们的各自功能如下：</p><ul><li>Pilot：为 envoy 提供了服务发现，流量管理和智能路由（AB测试、金丝雀发布等），以及错误处理（超时、重试、熔断）功能。用户通过 pilot 的 API 管理网络相关的资源对象，pilot 会根据用户的配置和服务的信息把网络流量管理变成 envoy 能识别的格式分发到各个 sidecar 代理中。</li><li>Mixer：为整个集群执行访问控制（哪些用户可以访问哪些服务）和 policy 管理（rate limit，quota 等），并且收集代理观察到的服务之间的流量统计数据</li><li>Citadel：为服务之间提供认证和证书管理，可以让服务自动升级成 TLS 协议</li></ul><p>数据面组件如下：</p><ul><li>Sidecar(Envoy)：负责控制面对网格控制的实际执行。istio中的默认sidecar是由Envoy派生出来的，在理论上，只要支持Envoy的xDs协议，其它类似的反向代理软件都可以代替Envoy。在istio的默认实现中，istio利用istio-init初始化容器中的iptables命令，对所在Pod的流量进行劫持，从而接管Pod中应用的通信过程，如此一来，就获得了通信的控制权，控制面的控制目的最终得以实现。</li></ul><p>istio的核心配置对象</p><p>istio在安装过程中会进行CRD的初始化，在Kubernetes集群中注册一系列的CRD。CRD在注册成功之后，会建立一些基础对象，完成istio的初始设置。</p><p>用户利用istio控制微服务通信，是通过向Kubernetes提交CRD资源的方式完成的。istio中的资源分为三组进行管理，分别是</p><ul><li>networking.istio.io</li><li>config.istio.io</li><li>authentication.istio.io</li></ul><h2 id="networking-istio-io"><a href="#networking-istio-io" class="headerlink" title="networking.istio.io"></a>networking.istio.io</h2><p>istio使用频率最高的核心资源，主要包括以下五种类型：</p><p>Gateway：网格内部服务互访或者网格外部流量进入网格，都要首先经过Gateway</p><p>VirtualService：主要由以下部分组成：<br>（1）Host：该对象所负责的主机名称，如果在Kubernetes内部，则这个主机名可以是服务名。<br>（2）Gateway：流量的来源网关，如果这一字段被省略，则代表使用的网关名为“mesh”，也就是默认的网格内部服务互联所用的网关。<br>（3）路由对象：网格中的流量，如果符合前面的Host和Gateway的条件，就需要根据实际协议对流量的处理方式进行甄别。</p><p>TCP&#x2F;TLS&#x2F;HTTP Route：路由对象</p><p>DestinationWeight：流量权重（金丝雀发布会用到）</p><p>Destination：由Subset和Port两个元素组成</p><h2 id="config-istio-io"><a href="#config-istio-io" class="headerlink" title="config.istio.io"></a>config.istio.io</h2><p>config.istio.io中的对象用于为Mixer组件提供配置，包含以下组件：Rule、Action、Instance、Adaptor、Template、Handler</p><h2 id="authentication-istio-io"><a href="#authentication-istio-io" class="headerlink" title="authentication.istio.io"></a>authentication.istio.io</h2><p>这一组API用于定义认证策略</p><h2 id="rbac-istio-io"><a href="#rbac-istio-io" class="headerlink" title="rbac.istio.io"></a>rbac.istio.io</h2><p>在istio中实现了一个和Kubernetes颇为相似的RBAC访问控制系统</p>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cloud native</tag>
      
      <tag>servicemesh</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
